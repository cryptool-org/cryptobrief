
options
{
  JDK_VERSION = "1.8";
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = true;
} 

PARSER_BEGIN(FFaplInterpreter)
package ffapl; 
import java.io.*; 
import ffapl.lib.interfaces.*;
import ffapl.java.interfaces.*;
import ffapl.lib.*;
import ffapl.exception.*;
import ffapl.ast.nodes.*;
import ffapl.ast.*;
import ffapl.visitor.*;
import ffapl.types.*;
import ffapl.java.logging.*;
import ffapl.java.exception.*;
import java.nio.charset.Charset;

/**
 * @author Alexander Ortner
 * @version 1.0
 *
 */
public class FFaplInterpreter extends Thread implements FFaplASTreeConstants 
{
  private static String _programName = "";
  private FFaplLogger _logger;
  private FFaplSymbolTypeCheckingVisitor _symbolVisit;
  private FFaplJavaInterpreterVisitor _javaInterpreter;
  private FFaplSymbolTable _symbolTable;
  private ASTProgram _root;
  public static boolean _interrupted;

  /**
   * @param logger
   * @param reader 
   */
  public FFaplInterpreter(FFaplLogger logger, Reader reader)
  {
		this(reader);
		_logger = logger;
		_interrupted = false;
		
  }

  /**
   * @param logger
   * @param stream 
   */
  public FFaplInterpreter(FFaplLogger logger, InputStream stream)
  {
		this(stream, Charset.forName("UTF-8"));
		_logger = logger;
		_interrupted = false;
		
  }
  
  public FFaplLogger getLogger(){
        return _logger;
  }
     
  /**
  * Start to parse and interpret the code
  */
  public void run()
  { 
      	try
      	{  
			_root = Program();
			//generate SymbolTable
        	_symbolTable = new FFaplSymbolTable();
        	//Symbol and Type checking
        	_symbolVisit = new FFaplSymbolTypeCheckingVisitor(_symbolTable, _logger, this);
        	_symbolVisit.visit(_root, null);
        	//interpret        	
        	_javaInterpreter = new FFaplJavaInterpreterVisitor(_symbolTable, _logger, this);
        	_javaInterpreter.visit(_root, null);     	      
    	}catch(ParseException pe){
    		_logger.log(ILevel.ERROR,
    					CompilerMessage.getError((ICompilerError) pe, _programName));
    	}catch(TokenMgrException te){
    		_logger.log(ILevel.ERROR,
    					CompilerMessage.getError((ICompilerError) te, _programName));
    	}catch(FFaplAlgebraicException e){
			_logger.log(ILevel.ERROR, CompilerMessage.getError((ICompilerError) e, _programName),
			            e.errorLine(),
			            e.errorColumn());
		}catch(FFaplException ffe){
    		_logger.log(ILevel.ERROR, CompilerMessage.getError((ICompilerError) ffe, _programName),
    		            ffe.errorLine(),
    		            ffe.errorColumn());
    	}/*catch(Exception general)
    	{
    	   Object[] arguments = {FFaplException.getCustomStackTrace(general)};
			_logger.log(ILevel.ERROR, (new FFaplException(arguments, ICompilerError.INTERNAL)).getErrorMessage());
    	}*/
  }
}


PARSER_END(FFaplInterpreter)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
< EQUAL_SIGN: "=" >
| 
  /*Operations*/
< LOWER: "<" >
|
< GREATER: ">" >
|
< ECLEFT: "<<" >
|
< ECRIGHT: ">>" >
|
< ECPAI: "PAI" >
|
< ECRANDOM: "RandomPoint" >
| 
< ECRANDOMSUB: "RandomPointSubfield" >
| 
< SAMEAS: "SameAs" >
| 
< ECBASEGF: "BaseGF" >
| 
< ECBASEZ: "BaseZ" >
| 
< LOWER_EQUAL: "<=" >
|
< GREATER_EQUAL: ">=" >
|
< EQUAL: "==" >
|
< NOT_EQUAL: "!=" >
|
< NOT: "!" >
|
< PLUS: "+" >
|
< MINUS: "-" >
|
< MULTIPLY: "*" >
|
< DIVIDE: "/" >
|
< MODULO: "MOD" >
/*Symbols*/
|
< HASH_KEY: "#" >
|
< SQUARED_BRACE_LEFT: "[" >
|
< SQUARED_BRACE_RIGHT: "]" >
|
< CURLY_BRACE_LEFT: "{" >
|
< CURLY_BRACE_RIGHT: "}" >
|
< BRACE_LEFT: "(" >
|
< BRACE_RIGHT: ")" >
|
< DOT: "." >
|
< ASSIGN: ":=" >
|
< SEMICOLON: ";" >
|
< COMMA: "," >
|
< COLON: ":" >
|
< POWER: "^" >
| 
/*Logical Operators */
< AND: "AND" >
|
< OR: "OR" >
|
< XOR: "XOR" >
|
/*Polynomial symbol */
//< X: "x" >
//|
< RESIDUE: "Z" >
}

TOKEN : /* FFAPL TOKENS */
{
 /* Types */
< INTEGER: "Integer" >
|
< BOOLEAN: "Boolean" >
|
< PRIME: "Prime" >
|
< POLYNOMIAL: "Polynomial" >
|
< TSTRING: "String" >
|
/*Statements */
< WHILE: "while" >
|
< NEW: "new" >
|
< IF: "if" >
| 
< FOR: "for" >
|
< TRUE: "true" >
|
< FALSE: "false" >
|
< ELSE: "else" >
/* Declarations */
|
< RANDOM: "Random" >
|
< RANDOMGENERATOR: "RandomGenerator" >
|
< TO: "to" >
|
< STEP: "step" >
|
< EC: "EC" >
|
< GF: "GF" >
|
< RECORD: "Record" >
|
< RECORD_END: "EndRecord" >
|
< PSEUDORANDOMGENERATOR: "PseudoRandomGenerator" >
|
< PROGRAM: "program" >
|
< PROCEDURE: "procedure" >
|
< FUNCTION: "function" >
|
< RETURN: "return" >
| 
< CONST: "const" >
|
< BREAK: "break" >
|
< HEX: "0x" >
}

TOKEN : /* FFAPL TOKENS */
{
< #LETTER: ["A"-"Z"] | ["a"-"z"] | "_">
|
< #HEXLETTER: ["A"-"F"] | ["a"-"f"] >
|
< #DIGIT_EX_ZERO: ["1"-"9"] >
|
< #ZERO: "0" >
|
< #DIGIT: < ZERO > | < DIGIT_EX_ZERO > >
|
/*< #OTHERCHAR: "+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!" | "?" |
		     	"=" | "#" | "%" | "<" | ">" | "$" | "(" | ")" | "[" | "]" | "{" | "}" |
		     	"\\" | "@" | "&" | "^" | "|" >
| */
< IDENT: <LETTER> (<LETTER> | <DIGIT> )* >
|
< NUMBER: < ZERO > | <DIGIT_EX_ZERO> (<DIGIT>)* >
|
< HEXNUMBER: < HEX > (< HEXLETTER > |  < DIGIT >)* >
| 
/*< STRING: "\"" ( " " | <LETTER> | <DIGIT> | <OTHERCHAR> )* "\"" > */
<STRING: "\"" ("\\\"" | ~["\""])* "\"" >
 
}

/* ----- COMMENTS ------ */
/** Copyright (c) 2006, Sun Microsystems, Inc.*/

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}
/* ----- ENDCOMMENTS ------ */





/* Operations */

ASTRelOp RelOp() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 4;
}
{
  (
    t1 = < LOWER_EQUAL >
	    {
	      pos = 0;
	    }
    |
    t1 = < GREATER_EQUAL >
     	{
     	  pos = 1;
	  	}
	|
    t1 = < GREATER >
	    {
	      pos = 2;
	    }
	|
    t1 = < LOWER >
        {
	     pos = 3;
	    }
  )
  {
    t2 = new FFaplNodeToken(t1);
	t3 = new FFaplNodeChoice(t2, pos, amount);
    return new ASTRelOp(FFT_RELOP, t3); 
  } 
}

ASTEqualOp EqualOp() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 2;
}
{
  (
    t1 = < EQUAL >
		{
	      pos = 0;
	    }
    |
    t1 = < NOT_EQUAL >
    	{
	      pos = 1;
	    } 
  )
  {
    t2 = new FFaplNodeToken(t1);
	t3 = new FFaplNodeChoice(t2, pos, amount);
    return new ASTEqualOp(FFT_EQUALOP, t3);
  }
}

ASTAddOp AddOp() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 2;
}
{
  (
    t1 = < PLUS >
		{
	      pos = 0;
	    }
    |
    t1 = < MINUS >
    	{
	      pos = 1;
	    } 
  )
  {
    t2 = new FFaplNodeToken(t1);
	t3 = new FFaplNodeChoice(t2, pos, amount);
    return new ASTAddOp(FFT_ADDOP, t3);
  }
}

ASTMulOp MulOp() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 3;
}
{
(
    t1 = < MULTIPLY >
		{
	      pos = 0;
	    }
    |
    t1 = < DIVIDE >
    	{
	      pos = 1;
	    }
	|
    t1 = < MODULO >
    	{
	      pos = 2;
	    } 
 )
  {
    t2 = new FFaplNodeToken(t1);
	t3 = new FFaplNodeChoice(t2, pos, amount);
    return new ASTMulOp(FFT_MULOP, t3);
  }
}


ASTRandom Random() throws FFaplException:
{
 Token t1;
 FFaplNodeOpt t2;
 FFaplNodeToken t3;
 ASTExpr t4;
 FFaplNodeSequence t5;
 FFaplNodeOpt t6;
 FFaplNodeSequence t7;
  }
{
  t1 = < RANDOM >
  {
    t3 = new FFaplNodeToken(t1);
    t2 = new FFaplNodeOpt();
  }
  	[
	        {
	          t5 = new FFaplNodeSequence();
	        }
  	  	t1 = < BRACE_LEFT >
	  	  	{
	  	  	  t5.addNode(new FFaplNodeToken(t1));
	  	  	}
  	  	t4 = Expr()
	  	  	{
	  	  	  t5.addNode(t4);
	  	  	  t6 = new FFaplNodeOpt();
	  	  	  t5.addNode(t6);//adds Optional Node to Sequence
	  	  	}
    	  [
    			{
    		      t7 = new FFaplNodeSequence();
    			}
    	   	t1 = < COLON >
    	   		{
	  	  	  	  t7.addNode(new FFaplNodeToken(t1));
	  	  		}
    	   	t4 = Expr()
	    	   	{
	    	   	  t7.addNode(t4);
	    	   	  t6.addNode(t7);//adds sequence to optional node
	    	   	}
    	  ]
    	t1 = < BRACE_RIGHT >
    	{
    	  t5.addNode(new FFaplNodeToken(t1));
    	  t2.addNode(t5); //adds Sequence to Optional Node
    	}
    ]

  {
    return new ASTRandom(FFT_RANDOM, t3, t2);
  }
}

ASTRandomGenerator RandomGenerator() throws FFaplException:
{
  Token t1;
  ASTExpr t2;
  FFaplNodeToken t3, t4, t5;
  FFaplNodeOpt t6;
  FFaplNodeSequence t7;
  ASTExpr t8;
  }
{
  	t1 = < RANDOMGENERATOR >
		{
		  t3 = new FFaplNodeToken(t1);
		}
  	t1 = < BRACE_LEFT >
	  	{
	  	  t4 = new FFaplNodeToken(t1);
	  	}
  	t2 = Expr()
	  	{
	  	  t6 = new FFaplNodeOpt();
	  	}
    	[
				{
				  t7 = new FFaplNodeSequence();
				}
    		t1 = < COLON >
    		{
    		  t7.addNode(new FFaplNodeToken(t1));
    		}
    		t8 = Expr()
    		{
    		  t7.addNode(t8);
    		  t6.addNode(t7);
    		}
    	]
    	t1 = < BRACE_RIGHT >
    	{
    	  t5 = new FFaplNodeToken(t1);
    	  return new ASTRandomGenerator(FFT_RANDOMGENERATOR, t3, t4, t2, t6, t5);
    	} 
}


ASTLiteral Literal() throws FFaplException:
{
  Token t1;
  FFaplNodeChoice t2;
  FFaplNodeToken t3;
  ASTRandom t4;
  ASTPolynomial t5;
  int amount = 7;
  FFaplNodeType t6;
  ASTECPoint t7;
  ASTECPAI t8;
  ASTECRandom t9;
}
{
  	{
    	t6 = new FFaplNodeType();
  	}
  (
   t1 = < TRUE >
	   {
	     t6.setType(new FFaplBoolean(true));
	     t6.addNode(new FFaplNodeToken(t1));
	     t2 = new FFaplNodeChoice(t6, 0, amount);
	   }
   |
   t1 = < FALSE >
	   {
	     t6.setType(new FFaplBoolean(false));
	     t6.addNode(new FFaplNodeToken(t1));
	     t2 = new FFaplNodeChoice(t6, 1, amount);
	   }
   |
   t4 = Random()
	   {
	     t6.setType(new FFaplRandom());
	     t6.addNode(t4);
	     t2 = new FFaplNodeChoice(t6, 2, amount);
	   }
   |
   t1 = < NUMBER >
   	   {
   	     t6.setType(new FFaplInteger(t1.image));
	     t6.addNode(new FFaplNodeToken(t1));
	     t2 = new FFaplNodeChoice(t6, 3, amount);
	   }
   |
   t1 = < HEXNUMBER >
   	   {
   	     t6.setType(new FFaplInteger(t1.image));
	     t6.addNode(new FFaplNodeToken(t1));
	     t2 = new FFaplNodeChoice(t6, 3, amount);
	   }
   |
   t5 = Polynomial()
   	   {
   	     t6.setType(new FFaplPolynomial());
	     t6.addNode(t5);
	     t2 = new FFaplNodeChoice(t6, 4, amount);
	   }
   |
   t1 = < STRING >
			{
			   	t6.setType(new FFaplString(t1.image));
	     		t6.addNode(new FFaplNodeToken(t1));
	     		t2 = new FFaplNodeChoice(t6, 5, amount);
			}
	|
	LOOKAHEAD(2)
   	t7 = ECPoint()
   	   {
   	     t6.setType(new FFaplEllipticCurve());
	     t6.addNode(t7);
	     t2 = new FFaplNodeChoice(t6, 6, amount);
	   }
	|
	LOOKAHEAD(2)
   	t8 = ECPAI()
   	   {
   	     t6.setType(new FFaplEllipticCurve());
	     t6.addNode(t8);
	     t2 = new FFaplNodeChoice(t6, 6, amount);
	   }
	|
	LOOKAHEAD(2)
	t9 = ECRandom()
	   {
		 t6.setType(new FFaplEllipticCurve());
		 t6.addNode(t9);
		 t2 = new FFaplNodeChoice(t6, 6, amount);
	   }
	 
  )
  {
    return new ASTLiteral(FFT_LITERAL, t2);
  }
    
}

ASTSelector Selector() throws FFaplException:
{
	Token t1;
	FFaplNodeChoice t2;
	FFaplNodeToken t3;
	FFaplNodeSequence t4;
	ASTExpr t5;
	ASTSelector t6;
	FFaplNodeOpt t7;
	int amount = 2; //Amount of choices
  }
{
  (
	    {
	      t4 = new FFaplNodeSequence();
	    }//start sequence
   	t1 = < SQUARED_BRACE_LEFT >
   	   {
	     t4.addNode(new FFaplNodeToken(t1));
	   }
   	t5 = Expr()
   	   {
	     t4.addNode(t5);
	   }
   	t1 = < SQUARED_BRACE_RIGHT >
   	   {
	     t4.addNode(new FFaplNodeToken(t1));
	     t7 = new FFaplNodeOpt();
	   }
   	[//Optional Node
   		t6 = Selector()
   		{
   		  t7.addNode(t6);
   		}
   	]
	   	{
	   	  t4.addNode(t7);
	   	  t2 = new FFaplNodeChoice(t4, 0, amount);
	   	}
   |//or
   		{
      		t4 = new FFaplNodeSequence();
    	}//start sequence
   	t1 = < DOT >
   	   {
	     t4.addNode(new FFaplNodeToken(t1));
	   }   	
   	t1 = < IDENT >
   	   {
	     t4.addNode(new FFaplNodeToken(t1));
	     t7 = new FFaplNodeOpt();
	   }
   	[//Optional
   		t6 = Selector()
   		{
   		  t7.addNode(t6);
   		}
   	]
   		{
	   	  t4.addNode(t7);
	   	  t2 = new FFaplNodeChoice(t4, 1, amount);//adds sequence to choice
	   	}
  )
  {
    return new ASTSelector(FFT_SELECTOR, t2);
  }
}


ASTArrayLen ArrayLen() throws FFaplException:
{
	Token t1;
	FFaplNodeOpt t2;
	ASTSelector t3;
	FFaplNodeToken t4, t5;
  }
{
	t1 = < HASH_KEY >
  		{
  		  t4 = new FFaplNodeToken(t1);
  		}
	t1 = < IDENT >
		{
		  t5 = new FFaplNodeToken(t1);
		  t2 = new FFaplNodeOpt();
		}
  	[//Optional
  		t3 = Selector()
  			{
  			  t2.addNode(t3);
  			}
  	]
  	{
  	  return new ASTArrayLen(FFT_ARRAYLEN, t4, t5, t2);
  	}
}

ASTPrimaryExpr PrimaryExpr() throws FFaplException:
{
	Token t1;
	FFaplNodeChoice t2;
	FFaplNodeSequence t3;
	ASTLiteral t4;
	ASTExpr t5;
	ASTProcFuncCall t6;
	ASTSelector t7;
	ASTArrayLen t8;
	FFaplNodeOpt t9;
	ASTArgumentList t10;
	int amount = 6;//amount of choices
  }
{
  (
		t4 = Literal()
		{
		  t2 = new FFaplNodeChoice(t4, 0, amount);
		}
	|
			{
			  t3 = new FFaplNodeSequence();
			}
		t1 = < BRACE_LEFT >
			{
			  t3.addNode(new FFaplNodeToken(t1));
			}
		t5 = Expr()
			{
			  t3.addNode(t5);
			}
		t1 = < BRACE_RIGHT >
			{
			  t3.addNode(new FFaplNodeToken(t1));
			  t2 = new FFaplNodeChoice(t3, 1, amount);
			}
		
	|
		LOOKAHEAD(2)
		t6 = ProcFuncCall()
			{
				t2 = new FFaplNodeChoice(t6, 2, amount);		  
			}
	|
			{
			  t3 = new FFaplNodeSequence();
			}
    	t1 = < IDENT >
    		{
			  t3.addNode(new FFaplNodeToken(t1));
			  t9 = new FFaplNodeOpt();
			}
    	[
    		t7 = Selector()
    			{
					t9.addNode(t7);    		  
    			}
    	]
    		{
    		  t3.addNode(t9);
    		  t2 = new FFaplNodeChoice(t3, 3, amount);
    		}
    |
    	t8 = ArrayLen()
    		{
    		  t2 = new FFaplNodeChoice(t8, 4, amount);				    	  
    		}
    |
    	{
			  t3 = new FFaplNodeSequence();
			}
		t1 = < CURLY_BRACE_LEFT >
			{
			  t3.addNode(new FFaplNodeToken(t1));
			}

		t10 = ArgumentList()
			{
			  t3.addNode(t10);
			}
			

		t1 = < CURLY_BRACE_RIGHT >
			{
			  t3.addNode(new FFaplNodeToken(t1));
			  t2 = new FFaplNodeChoice(t3, 5, amount);
			}
			
  )
  {
    return new ASTPrimaryExpr(FFT_PRIMARYEXPR, t2);
  }
}

ASTUnaryExpr UnaryExpr() throws FFaplException:
{
  Token t5;
  ASTAddOp t1;
  ASTPrimaryExpr t2;
  FFaplNodeOpt t3;
  FFaplNodeChoice t4;
  int amount = 2;
} 
{
  	{
  	  t3 = new FFaplNodeOpt();
  	}
  [
  	(
  		  
	  	t1 = AddOp()
	  	{
	  	  t4 = new FFaplNodeChoice(t1, 0, amount);
	  	}
 	|//or
 		t5 = < NOT >

 		{
	  	  t4 = new FFaplNodeChoice(new FFaplNodeToken(t5), 1, amount);
	  	}
 	)
 	{
 	  t3.addNode(t4);
 	}
 
  ]
  t2 = PrimaryExpr()
  {
    return new ASTUnaryExpr(FFT_UNARYEXPR, t3, t2);
  }
}

ASTPowExpr PowExpr() throws FFaplException:
{
  Token t1;
  ASTUnaryExpr t2, t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
  
}
{
  t2 = UnaryExpr()
  	{
  	  t4 = new FFaplNodeListOpt();
  	}
  (//Optional List Begins
	    {
	      t5 = new FFaplNodeSequence();
	    }
    t1 = < POWER >
    	{
    	  t5.addNode(new FFaplNodeToken(t1));
    	}
    t3 = UnaryExpr()
	    {
	      t5.addNode(t3);
	      t4.addNode(t5);
	    }
   )*
   {
     return new ASTPowExpr(FFT_POWEXPR, t2, t4);
   }
}

ASTMulExpr MulExpr() throws FFaplException:
{
  ASTPowExpr t1, t2;
  ASTMulOp t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
}
{
  t1 = PowExpr()
  {
    t4 = new FFaplNodeListOpt();
  }
  (//Optional List Begins
    	{
    	  t5 = new FFaplNodeSequence();
    	}
    t3 = MulOp()
    	{
    	  t5.addNode(t3);
    	}
    t2 = PowExpr()
    	{
    	  t5.addNode(t2);
    	  t4.addNode(t5);
    	}
   )*

  {
    return new ASTMulExpr(FFT_MULEXPR, t1, t4);
  }
}

ASTAddExpr AddExpr() throws FFaplException:
{
  ASTMulExpr t1;
  FFaplNodeListOpt t2 = new FFaplNodeListOpt();
  FFaplNodeSequence t3 = null;
  ASTAddOp t4;
  ASTMulExpr t5;
  }
{
  t1 = MulExpr()
   
   //Optional List begins
   (    
    LOOKAHEAD(2)
    {
      t3 = new FFaplNodeSequence();
    }
       t4 = AddOp()
       t5 = MulExpr()
    {
      t3.addNode(t4);//adds node to sequence
      t3.addNode(t5);//adds node to sequence
      t2.addNode(t3);//adds Sequence to Optional List
    }

    )*
    //Optional List ends

  {
    return new ASTAddExpr(FFT_ADDEXPR, t1, t2);
  }
}

ASTRelExpr RelExpr() throws FFaplException:
{
  ASTAddExpr t1, t2;
  ASTRelOp t3;
  FFaplNodeOpt t4;
  FFaplNodeSequence t5;
	
}
{
  t1 = AddExpr()
	  {
	    t4 = new FFaplNodeOpt();
	  }
  [//Optional Begins
  		{
  		  t5 = new FFaplNodeSequence();
  		}
  	t3 = RelOp()
  		{
  		  t5.addNode(t3);
  		}
  	t2 = AddExpr()
  		{
  		  t5.addNode(t2);
  		  t4.addNode(t5);
  		}
  ]
  {
    return new ASTRelExpr(FFT_RELEXPR, t1, t4);
  }
}

ASTEqualExpr EqualExpr() throws FFaplException:
{
  ASTRelExpr t1, t2;
  ASTEqualOp t3;
  FFaplNodeOpt t4;
  FFaplNodeSequence t5;
}
{
  t1 = RelExpr()
	  {
	    t4 = new FFaplNodeOpt();
	  }
  [
	  {
	    t5 = new FFaplNodeSequence();
	  }
  	t3 = EqualOp()
	  	{
	  	  t5.addNode(t3);
	  	}
  	t2 = RelExpr()
	  	{
	  	  t5.addNode(t2);
	  	  t4.addNode(t5);
	  	}
  ]
  {
    return new ASTEqualExpr(FFT_EQUALEXPR, t1, t4);
  }
}





ASTCondOrExpr CondOrExpr() throws FFaplException:
{
  ASTCondAndExpr t1, t2;
  Token t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
}
{
  t1 = CondAndExpr()
	  {
	    t4 = new FFaplNodeListOpt();
	  }
  (//Optional List
	  {
	    t5 = new FFaplNodeSequence();
	  }
  	t3 = < OR >
	  	{
	  	  t5.addNode(new FFaplNodeToken(t3));
	  	}
  	t2 = CondAndExpr()
	  	{
	  	  t5.addNode(t2);
	  	  t4.addNode(t5);
	  	}
  )*

  {
    return new ASTCondOrExpr(FFT_CONDOREXPR, t1, t4);
  }
}




ASTCondAndExpr CondAndExpr() throws FFaplException:
{
  ASTEqualExpr t1, t2;
  Token t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
}
{
  t1 = EqualExpr()
	  {
	    t4 = new FFaplNodeListOpt();
	  }
  (//Optional List
	  {
	    t5 = new FFaplNodeSequence();
	  }
  	t3 = < AND >
	  	{
	  	  t5.addNode(new FFaplNodeToken(t3));
	  	}
  	t2 = EqualExpr()
	  	{
	  	  t5.addNode(t2);
	  	  t4.addNode(t5);
	  	}
  )*

  {
    return new ASTCondAndExpr(FFT_CONDANDEXPR, t1, t4);
  }
}

ASTCreationExpr CreationExpr() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  ASTArrayType t3;
  FFaplNodeList t4;
  FFaplNodeSequence t5;
  ASTExpr t6;
  int amount = 2;
  
}
{
  t1 = < NEW >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t3 = ArrayType()
	  {
	    t4 = new FFaplNodeList();
	  }
  (//Node List
	  {
	    t5 = new FFaplNodeSequence();
	  }
  	t1 = < SQUARED_BRACE_LEFT >
	  	{
	  	  t5.addNode(new FFaplNodeToken(t1));
	  	}
  	t6 = Expr()
	  	{
	  	  t5.addNode(t6);
	  	}
  	t1 = < SQUARED_BRACE_RIGHT >
	  	{
	  	  t5.addNode(new FFaplNodeToken(t1));
	  	  t4.addNode(t5);
	  	}
  )+
  {
    return new ASTCreationExpr (FFT_CREATIONEXPR, t2, t3, t4);
  }
}

ASTExprComplexAType ExprComplexAType() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTGF t2;
  FFaplNodeSequence t6, t11;
  FFaplNodeType t8;
  FFaplNodeOpt t10;
  ASTExpr t7;
  Token t9;
  ASTEC t12;
  int amount = 3;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	    
	  	t2 = GF()
		  	{
		  	  t8.setType(new FFaplGaloisField());
		  	  t8.addNode(t2);
		  	  t1 = new FFaplNodeChoice(t8, 0, amount);
		  	}
	  |
	  	t12 = EC()
		  	{
		  	  t8.setType(new FFaplEllipticCurve());
		  	  t8.addNode(t12);
		  	  t1 = new FFaplNodeChoice(t8, 2, amount);
		  	}
	  |
	          {
			      t6 = new FFaplNodeSequence();		    	
			  }
		   t9 = < RESIDUE >
			  {
			    t6.addNode(new FFaplNodeToken(t9));
			  }
		  	t9 = < BRACE_LEFT >
			  	{
			  	  t6.addNode(new FFaplNodeToken(t9));
			  	}
		  	t7 = Expr()
			  	{
			  	  t6.addNode(t7);
			  	}
		  	t9 = < BRACE_RIGHT >
			  	{
			  	  t6.addNode(new FFaplNodeToken(t9));
			  	  t8.setType(new FFaplResidueClass());
			  	  t10 = new FFaplNodeOpt();
			  	}
			  	
			[ LOOKAHEAD(2)
			 	{
			 	  t11 = new FFaplNodeSequence();
			 	}

			 t9 = < SQUARED_BRACE_LEFT >
			  	{
			  	  t11.addNode(new FFaplNodeToken(t9));
			 	}
			 t9 = < IDENT > //x
			  	{
			  	  t11.addNode(new FFaplNodeToken(t9));
			 	}
			 t9 = < SQUARED_BRACE_RIGHT >
			  	{
			  	  t11.addNode(new FFaplNodeToken(t9));
			  	  t10.addNode(t11);
			  	  t8.setType(new FFaplPolynomialResidue());
			 	}
			 ]
			  	{
			  	  t6.addNode(t10);
			  	  t8.addNode(t6);
			  	  t1 = new FFaplNodeChoice(t8, 1, amount);
			  	}
  )
  {
    return new ASTExprComplexAType(FFT_EXPRCOMPLEXATYPE, t1);
  }
}

ASTExprRandomGType ExprRandomGType() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTPsRandomGenerator t4;
  ASTRandomGenerator t5;
  FFaplNodeType t8;
  int amount = 2;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	  	t4 = PsRandomGenerator()
	  	  	{
	  	  	  t8.setType(new FFaplPsRandomGenerator());
		  	  t8.addNode(t4);
		  	  t1 = new FFaplNodeChoice(t8, 0, amount);
		  	}
	  |
	  	
	  	t5 = RandomGenerator()
	  	  	{
	  	  	  t8.setType(new FFaplRandomGenerator());
		  	  t8.addNode(t5);
		  	  t1 = new FFaplNodeChoice(t8, 1, amount);
		  	}
  )
  {
    return new ASTExprRandomGType(FFT_EXPRRANDOMGTYPE, t1);
  }
}

ASTExpr Expr() throws FFaplException:
{
  FFaplNodeChoice t1;
  FFaplNodeSequence t2, t3;
  FFaplNodeListOpt t4;
  ASTCondOrExpr t5, t6;
  ASTCreationExpr t7;
  Token t8;
  int amount = 2;
}
{
  (
	      {
	        t2 = new FFaplNodeSequence();
	      }
	  t5 = CondOrExpr()
		  {
		    t2.addNode(t5);
		    t4 = new FFaplNodeListOpt();
		  }
	  (//Optional List
		    {
		      t3 = new FFaplNodeSequence();
		    }
	    t8 = < XOR >
		    {
		      t3.addNode(new FFaplNodeToken(t8));   
		    }
	    t6 = CondOrExpr()
		    {
		      t3.addNode(t6);
		      t4.addNode(t3);
		    }
	  )*
	  {
	    t2.addNode(t4);
	    t1 = new FFaplNodeChoice(t2, 0, amount);
	  }
  |//or
      t7 = CreationExpr()
	      {
	        t1 = new FFaplNodeChoice(t7, 1, amount);
	      }
  )
  {
    return new ASTExpr(FFT_EXPR, t1);
  }
}

 ASTArgumentList ArgumentList() throws FFaplException:
{
  Token t1;
  ASTExpr t2, t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
}
{
  t2 = Expr()
	  {
	    t4 = new FFaplNodeListOpt();
	  }
  (//Optional List
	  {
	    t5 = new FFaplNodeSequence();
	  }
    t1 = < COMMA >
	    {
	      t5.addNode(new FFaplNodeToken(t1));
	    }
  	t3 = Expr()
	  	{
	  	  t5.addNode(t3);
	  	  t4.addNode(t5);
	  	}
  )*

  {
    return new ASTArgumentList(FFT_ARGUMENTLIST, t2, t4);
  }
}

ASTProcFuncCall ProcFuncCall() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t4;
  FFaplNodeOpt t5;
  ASTArgumentList t6;
  }
{
  t1 = < IDENT >
	   {
	     t2 = new FFaplNodeToken(t1);
	   }
  t1 = < BRACE_LEFT >
	   {
	     t3 = new FFaplNodeToken(t1);
	     t5 = new FFaplNodeOpt();
	   }
  [
  	t6 = ArgumentList()
	  	{
	  	  t5.addNode(t6);
	  	}
  ]  
  t1 = < BRACE_RIGHT >
	   {
	     t4 = new FFaplNodeToken(t1);
	   }
  {
    return new ASTProcFuncCall(FFT_PROCFUNCCALL, t2, t3, t5, t4);
  }
}

ASTAssignment Assignment() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3;
  FFaplNodeOpt t4;
  ASTSelector t5;
  ASTExpr t6;
}
{
  t1 = < IDENT >
	  {
	    t2 = new FFaplNodeToken(t1);
	    t4 = new FFaplNodeOpt();
	  }
  [
  	t5 = Selector()
	  	{
	  	  t4.addNode(t5);
	  	}
  ]
  t1 = < ASSIGN >
	  {
	    t3 = new FFaplNodeToken(t1);
	  }
  t6 = Expr()

  {
    return new ASTAssignment(FFT_ASSIGNMENT, t2, t4, t3, t6);
  }
}




ASTECAssignment ECAssignment() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t5, t6, t7;
}
{
  t1 = < ECLEFT >
  t1 = < IDENT >
	  {		t5 = new FFaplNodeToken(t1);
	  }
  t1 = < COMMA >
  t1 = < IDENT >
  	  {
		t6 = new FFaplNodeToken(t1);
	  }
  t1 = < ECRIGHT >
  t1 = < ASSIGN >
  t1 = < IDENT >
  	  {
		t7 = new FFaplNodeToken(t1);
	  }

  {
    return new ASTECAssignment(FFT_ECASSIGNMENT, t5, t6, t7);
  }
}




ASTCondition Condition() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t4;
  ASTExpr t3;
}
{
  t1 = < BRACE_LEFT >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t3 = Expr()
  t1 = < BRACE_RIGHT >
  	  {
	    t4 = new FFaplNodeToken(t1);
	  } 
	{
	  return new ASTCondition(FFT_CONDITION, t2, t3, t4);
	}
}

ASTBlock Block() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t5;
  FFaplNodeListOpt t3;
  ASTStatementList t4;
  ASTDecl t6;
}
{
   t1 = < CURLY_BRACE_LEFT >
	   {
	     t2 = new FFaplNodeToken(t1);
	     t3 = new FFaplNodeListOpt();
	   }
	  
   (//Optional Node List
    LOOKAHEAD(2)
    	t6 = Decl()
	    	{
	    	  t3.addNode(t6);
	    	}
   )*
   t4 = StatementList()
   
   t1 = < CURLY_BRACE_RIGHT >
   	   {
	     t5 = new FFaplNodeToken(t1);
	   }
	{
	  return new ASTBlock(FFT_BLOCK, t2, t3, t4, t5);
	}
}

ASTFuncBlock FuncBlock() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t6;
  FFaplNodeListOpt t3;
  ASTStatementList t4;
  ASTReturnStatement t5;
  ASTDecl t7;
}
{
  t1 = < CURLY_BRACE_LEFT >
	  {
	    t2 = new FFaplNodeToken(t1);
	    t3 = new FFaplNodeListOpt();
	  }
  (//Optional Node List
        LOOKAHEAD(2)
    	t7 = Decl()
	    	{
	    	  t3.addNode(t7);
	    	}
   )*
  t4 = StatementList()
  t5 = ReturnStatement()
  t1 = < CURLY_BRACE_RIGHT >
  	  {
	    t6 = new FFaplNodeToken(t1);
	  }

  {
    return new ASTFuncBlock(FFT_FUNCBLOCK, t2, t3, t4, t5, t6);
  }
}


ASTElseBlock ElseBlock() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTIfStatement t2;
  ASTBlock t3;
  int amount = 2;
}
{
  (
    	t2 = IfStatement()
	    	{
	    	  t1 = new FFaplNodeChoice(t2, 0, amount);
	    	}
    |
    	t3 = Block()
    		{
	    	  t1 = new FFaplNodeChoice(t3, 1, amount);
	    	}
  )
  {
    return new ASTElseBlock(FFT_ELSEBLOCK, t1);
  }
}

ASTIfStatement IfStatement() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  ASTCondition t3;
  ASTBlock t4;
  FFaplNodeOpt t5;
  FFaplNodeSequence t6;
  ASTElseBlock t7;
}
{
  t1 = < IF >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t3 = Condition()
  t4 = Block()
	  {
	    t5 = new FFaplNodeOpt();
	  }
  [
  		{
  		  t6 = new FFaplNodeSequence();
  		}
  	t1 = < ELSE >
	  	{
	  	  t6.addNode(new FFaplNodeToken(t1));
	  	}
  	t7 = ElseBlock()
	  	{
	  	  t6.addNode(t7);
	  	  t5.addNode(t6);
	  	}
  ]

	{
	  return new ASTIfStatement(FFT_IFSTATEMENT, t2, t3, t4, t5);
	}
  
}

ASTWhileStatement WhileStatement() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  ASTCondition t3;
  ASTBlock t4;
}
{
  t1 = < WHILE >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t3 = Condition()
  t4 = Block()
  {
    return new ASTWhileStatement(FFT_WHILESTATEMENT, t2, t3, t4);
  }
}

ASTForStatement ForStatement() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t4, t6;
  ASTExpr t5, t7, t11;
  FFaplNodeOpt t8;
  ASTBlock t9;
  FFaplNodeSequence t10;
}
{
  t1 = < FOR >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t1 = < IDENT >
  	  {
	    t3 = new FFaplNodeToken(t1);
	  }
  t1 = < EQUAL_SIGN >
      {
	    t4 = new FFaplNodeToken(t1);
	  }
  t5 = Expr()
  t1 = < TO >
      {
	    t6 = new FFaplNodeToken(t1);
	  }
  t7 = Expr()
      {
	    t8 = new FFaplNodeOpt();
	  }
  [//Optional
  		{
    		t10 = new FFaplNodeSequence();
        }
	 t1 = < STEP >
		 {
		   t10.addNode(new FFaplNodeToken(t1));
		 }
	 t11 = Expr()
		 {
		   t10.addNode(t11);
		   t8.addNode(t10);
		 }
  ]
  t9 = Block()
  {
    return new ASTForStatement(FFT_FORSTATEMENT, t2, t3, t4, t5, t6, t7, t8, t9);
  }
}

ASTReturnStatement ReturnStatement() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t4;
  ASTExpr t3;
}
{
  t1 = < RETURN >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t3 = Expr()
  t1 = < SEMICOLON >
  	  {
	    t4 = new FFaplNodeToken(t1);
	  }
  {
    return new ASTReturnStatement(FFT_RETURNSTATEMENT, t2, t3, t4);
  }
}

ASTBreak Break() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
}
{
  t1 = < BREAK >
  {
    t2 = new FFaplNodeToken(t1);
    return new ASTBreak(FFT_BREAK, t2); 
  }
}


ASTStatementList StatementList() throws FFaplException:
{
  FFaplNodeListOpt t1;
  FFaplNodeSequence t2;
  ASTStatement t3;
  Token t4;
  FFaplNodeChoice t5;
  ASTBlockStatement t6;
  int amount = 2;
}
{
	  {
	    t1 = new FFaplNodeListOpt();
	  }
 (
   		
	   (
	     
			   {
			     t2 = new FFaplNodeSequence();
			   }
		   t3 = Statement()
			   {
			     t2.addNode(t3);
			   }
		   t4 = < SEMICOLON >
			   {
			     t2.addNode(new FFaplNodeToken(t4));
			    	t5 = new FFaplNodeChoice(t2, 0, amount);
			   }
		|//or
			t6 = BlockStatement()
			 {
			   t5 = new FFaplNodeChoice(t6, 1, amount);
			 }
		)
		{
		   t1.addNode(t5);
		}
  )*
 {
   return new ASTStatementList(FFT_STATEMENTLIST, t1);
 }
}

ASTStatement Statement() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTProcFuncCall t5;
  ASTAssignment t6;
  ASTBreak t7;
  ASTECAssignment t8;
  int amount = 4;
}
{
   (
	  	LOOKAHEAD(2)
	  	t5 = ProcFuncCall()
	  		{
		  	  t1 = new FFaplNodeChoice(t5, 0, amount);
		  	}
	  |//or
	  	t6 = Assignment()
	  		{
		  	  t1 = new FFaplNodeChoice(t6, 1, amount);
		  	}
	  |//or
	  	t7 = Break()
	  		{
		  	  t1 = new FFaplNodeChoice(t7, 2, amount);
		  	}
	  |//or
	  	t8 = ECAssignment()
	  		{
		  	  t1 = new FFaplNodeChoice(t8, 3, amount);
		  	}
 	)
 	{
 	  return new ASTStatement(FFT_STATEMENT, t1);
 	}
}

ASTBlockStatement BlockStatement() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTIfStatement t2;
  ASTWhileStatement t3;
  ASTForStatement t4;
  int amount = 3;
}
{
   (
    
	  	t2 = IfStatement()
		  	{
		  	  t1 = new FFaplNodeChoice(t2, 0, amount);
		  	}
	  |//or
	  	t3 = WhileStatement()
	  		{
		  	  t1 = new FFaplNodeChoice(t3, 1, amount);
		  	}
	  |//or
		t4 = ForStatement()
	  		{
		  	  t1 = new FFaplNodeChoice(t4, 2, amount);
		  	}	
 	)
 	{
 	  return new ASTBlockStatement(FFT_BLOCKSTATEMENT, t1);
 	}
}

ASTPrimitiveType PrimitiveType() throws FFaplException:
{
  FFaplNodeChoice t1;
  Token t2;
  FFaplNodeOpt t3;
  FFaplNodeSequence t4, t5;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 3;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	      t2 = < INTEGER >
		  	  {
		  	    t8.setType(new FFaplInteger());
		  	    t8.addNode(new FFaplNodeToken(t2));
		  	    t1 = new FFaplNodeChoice(t8, 0, amount);
		  	  }
	  |//or
	  	  t2 = < BOOLEAN >
		  	  {
		  	    t8.setType(new FFaplBoolean());
		  	    t8.addNode(new FFaplNodeToken(t2));
		  	    t1 = new FFaplNodeChoice(t8, 1, amount);
		  	  }
	  |//or
	  	  t2 = < TSTRING >
	  	  	  {
		  	    t8.setType(new FFaplString());
		  	    t8.addNode(new FFaplNodeToken(t2));
		  	    t1 = new FFaplNodeChoice(t8, 1, amount);
		  	  }
   )
   {
     return new ASTPrimitiveType(FFT_PRIMITIVETYPE, t1);
   }
}

ASTAlgebraicType AlgebraicType() throws FFaplException:
{
  FFaplNodeChoice t1;
  Token t2;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 2;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	  	
	 	  t2 = < PRIME >
		 	  {
		 	    t8.setType(new FFaplPrime());
		  	    t8.addNode(new FFaplNodeToken(t2));
		  	    t1 = new FFaplNodeChoice(t8, 0, amount);
		  	  }
	  | //or
		  t2 = < POLYNOMIAL >
	  	  	{
	  	  	  t8.setType(new FFaplPolynomial());
		  	  t8.addNode(new FFaplNodeToken(t2));
		  	  t1 = new FFaplNodeChoice(t8, 1, amount);
		  	}
   )
   {
     return new ASTAlgebraicType(FFT_ALGEBRAICTYPE, t1);
   }
}




ASTECBaseField ECBaseField() throws FFaplException:
{
	Token t1;
	FFaplNodeToken t2;
	FFaplNodeToken t3;
	FFaplNodeChoice t4;
	FFaplNodeType t5;

	int amount = 2;
}
{
  {		t5 = new FFaplNodeType();
  }
  (    
	  t1 = < ECBASEGF > 
	  {
	    	t2 = new FFaplNodeToken(t1);
	    	t5.setType(new FFaplGaloisField());
			t4 = new FFaplNodeChoice(t5, 0, amount);
	  }
	|
	  t1 = <  ECBASEZ >
	  {
	    	t2 = new FFaplNodeToken(t1);
	    	t5.setType(new FFaplResidueClass());
			t4 = new FFaplNodeChoice(t5, 1, amount);
	  }

  )
  t1 = < BRACE_LEFT >
  {

  }
  t1 = < IDENT >
  {
	t3 = new FFaplNodeToken(t1);
  }
  t1 = < BRACE_RIGHT >
  {

  }

  {
	return new ASTECBaseField(FFT_ECBASEFIELD,t2,t3,t4);
  }


}




ASTSameAs SameAs() throws FFaplException:
{
	Token t1;
	FFaplNodeToken t2;
}
{
  t1 = < SAMEAS >
  {

  }
  t1 = < BRACE_LEFT >
  {

  }
  t1 = < IDENT >
  {
	t2 = new FFaplNodeToken(t1);
  }
  t1 = < BRACE_RIGHT >
  {

  }

  {
	return new ASTSameAs(FFT_SAMEAS,t2);
  }


}


ASTContainerType ContainerType() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTRecord t2;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 1;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	      t2 = Record ()
	  	  	{
	  	  	  t8.setType(new FFaplRecord());
		  	  t8.addNode(t2);
		  	  t1 = new FFaplNodeChoice(t8, 0, amount);
		  	}
   )
   {
     return new ASTContainerType(FFT_CONTAINERTYPE, t1);
   }
}

ASTComplexAlgebraicType ComplexAlgebraicType() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTRecord t3;
  Token t5;
  FFaplNodeSequence t6, t7;
  FFaplNodeType t8;
  FFaplNodeOpt t9;
  int amount = 3;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	    
	  	t5 = < GF >
		  	{
		  	  t8.setType(new FFaplGaloisField());
		  	  t8.addNode(new FFaplNodeToken(t5));
		  	  t1 = new FFaplNodeChoice(t8, 0, amount);
		  	}
	  | 
	  	t5 = < EC >
		  	{
		  	  t8.setType(new FFaplEllipticCurve());
		  	  t8.addNode(new FFaplNodeToken(t5));
		  	  t1 = new FFaplNodeChoice(t8, 2, amount);
		  	}
	  |          
       		  {
			      t6 = new FFaplNodeSequence();		    	
			  }
		   t5 = < RESIDUE >
			  {
			    t6.addNode(new FFaplNodeToken(t5));
			  }
		  	t5 = < BRACE_LEFT >
			  	{
			  	  t6.addNode(new FFaplNodeToken(t5));
			 	}
		  	t5 = < BRACE_RIGHT >
			  	{
			  	  t6.addNode(new FFaplNodeToken(t5));
			  	  t9 = new FFaplNodeOpt();
			  	  t8.setType(new FFaplResidueClass());
			  	}
			 [
			  LOOKAHEAD(2)
			 	{
			 	  t7 = new FFaplNodeSequence();
			 	}

			 t5 = < SQUARED_BRACE_LEFT >
			  	{
			  	  t7.addNode(new FFaplNodeToken(t5));
			 	}
			 t5 = < IDENT >
			  	{
			  	  t7.addNode(new FFaplNodeToken(t5));
			 	}
			 t5 = < SQUARED_BRACE_RIGHT >
			  	{
			  	  t7.addNode(new FFaplNodeToken(t5));
			  	  t9.addNode(t7);
			  	  t8.setType(new FFaplPolynomialResidue());
			 	}
			 ]
			  	
            {
                  t6.addNode(t9);
			  	  t8.addNode(t6);
			  	  t1 = new FFaplNodeChoice(t8, 1, amount);
			 }	 
  )
  {
    return new ASTComplexAlgebraicType(FFT_COMPLEXALGEBRAICTYPE, t1);
  }
}

ASTRandomGeneratorType RandomGeneratorType() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTRecord t3;
  Token t5;
  FFaplNodeSequence t6, t7;
  FFaplNodeType t8;
  FFaplNodeOpt t9;
  int amount = 2;
}
{
  {
    t8 = new FFaplNodeType();
  }
  (
	  	t5 = < PSEUDORANDOMGENERATOR >
	  	  	{
	  	  	  t8.setType(new FFaplPsRandomGenerator());
		  	  t8.addNode(new FFaplNodeToken(t5));
		  	  t1 = new FFaplNodeChoice(t8, 0, amount);
		  	}
	  |
	  	t5 = < RANDOMGENERATOR >
	  	  	{
	  	  	  t8.setType(new FFaplRandomGenerator());
		  	  t8.addNode(new FFaplNodeToken(t5));
		  	  t1 = new FFaplNodeChoice(t8, 1, amount);
		  	}			 
  )
  {
    return new ASTRandomGeneratorType(FFT_RANDOMGENERATORTYPE, t1);
  }
}

ASTConstType ConstType() throws FFaplException:
{
  FFaplNodeChoice t3;
  ASTPrimitiveType t4;
  ASTExprComplexAType t5;
  ASTAlgebraicType t6;
  int amount = 2;
  
}
{
  (
       	
		
		t5 = ExprComplexAType()
			{
			  t3 = new FFaplNodeChoice(t5, 0, amount);
			}
     | 
	    t4 = PrimitiveType()
			{
			  t3 = new FFaplNodeChoice(t4, 1, amount);
			}
     |
        t6 = AlgebraicType()
			{
			  t3 = new FFaplNodeChoice(t6, 2, amount);
			}
  )
  {
    return new ASTConstType (FFT_CONSTTYPE, t3);
  }
}

ASTArrayType ArrayType() throws FFaplException:
{
  FFaplNodeChoice t3;
  ASTPrimitiveType t4;
  ASTAlgebraicType t6;
  ASTComplexAlgebraicType t7;
  int amount = 3;
  
}
{
  (
       	
	 	t4 = PrimitiveType()
			{
			  t3 = new FFaplNodeChoice(t4, 0, amount);
			}
     |
        t6 = AlgebraicType()
			{
			  t3 = new FFaplNodeChoice(t6, 1, amount);
			}
	 |
        t7 = ComplexAlgebraicType()
			{
			  t3 = new FFaplNodeChoice(t7, 2, amount);
			}
  )
  {
    return new ASTArrayType (FFT_ARRAYTYPE, t3);
  }
}

ASTDeclType DeclType() throws FFaplException:
{
  Token t0;
  FFaplNodeChoice t1;
  ASTPrimitiveType t2;
  FFaplNodeSequence t4, t6;
  FFaplNodeListOpt t5;
  ASTContainerType t7;
  ASTAlgebraicType t8;
  ASTExprComplexAType t9;
  ASTExprRandomGType t10;
  ASTSameAs t11;
  ASTECBaseField t12;
  int amount = 7;
}
{
	(
	    t10 = ExprRandomGType()
			{
			  t1 = new FFaplNodeChoice(t10, 0, amount);
			}
	  
	  | //or
	  	  {
		    t4 = new FFaplNodeSequence();
		  } 
		t9 = ExprComplexAType()
			{
		  	  t4.addNode(t9);
		  	  t5 = new FFaplNodeListOpt();
		  	}
	  		(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 1, amount);
		  }
	  | //or
		  {
		    t4 = new FFaplNodeSequence();
		  }
	  	t2 = PrimitiveType() 
		  	{
		  	  t4.addNode(t2);
		  	  t5 = new FFaplNodeListOpt();
		  	}
			(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 2, amount);
		  }
	| //or
		{
		    t4 = new FFaplNodeSequence();
		  }
	  	t8 = AlgebraicType() 
		  	{
		  	  t4.addNode(t8);
		  	  t5 = new FFaplNodeListOpt();
		  	}
			(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 3, amount);
		  }
	| //or
	  
		t7 = ContainerType()
			{
			  t1 = new FFaplNodeChoice(t7, 4, amount);
			}
	| //or
		t11 = SameAs()
			{				t1 = new FFaplNodeChoice(t11,5,amount);
			}
	| //or
		t12 = ECBaseField()
			{
				t1 = new FFaplNodeChoice(t12,6,amount);
			}
	)
	{
	  return new ASTDeclType(FFT_DECLTYPE, t1);
	}
}

ASTParamType ParamType() throws FFaplException:
{
  Token t0;
  FFaplNodeChoice t1;
  ASTPrimitiveType t2;
  FFaplNodeSequence t4, t6;
  FFaplNodeListOpt t5;
  ASTAlgebraicType t8;
  ASTComplexAlgebraicType t9;
  ASTRandomGeneratorType t10;
  int amount = 4;
}
{
	(
	  
	  
		t10 = RandomGeneratorType()
			{
			  t1 = new FFaplNodeChoice(t10, 0, amount);
			}
	  | //or
	  
		  {
		    t4 = new FFaplNodeSequence();
		  }
	  		t9 = ComplexAlgebraicType()
		  	{
		  	  t4.addNode(t9);
		  	  t5 = new FFaplNodeListOpt();
		  	}
			(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 1, amount);
		  }
	  | //or
		  {
		    t4 = new FFaplNodeSequence();
		  }
	  	t2 = PrimitiveType() 
		  	{
		  	  t4.addNode(t2);
		  	  t5 = new FFaplNodeListOpt();
		  	}
			(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 2, amount);
		  }
	| //or
		{
		    t4 = new FFaplNodeSequence();
		  }
	  	t8 = AlgebraicType() 
		  	{
		  	  t4.addNode(t8);
		  	  t5 = new FFaplNodeListOpt();
		  	}
			(
			    {
			      t6 = new FFaplNodeSequence();
			    }
			  t0 = < SQUARED_BRACE_LEFT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				}
			  t0 = < SQUARED_BRACE_RIGHT >
				{
				  t6.addNode(new FFaplNodeToken(t0));
				  t5.addNode(t6);
				}  
			)*

		  {
		    t4.addNode(t5);
		    t1 = new FFaplNodeChoice(t4, 3, amount);
		  }
	)
	{
	  return new ASTParamType(FFT_PARAMTYPE, t1);
	}
}

ASTDecl Decl() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t3, t5, t7;
  FFaplNodeListOpt t4;
  ASTDeclType t6;
  FFaplNodeSequence t8;
}
{
  //t1 = < DECLARE >
	//  {
	//    t2 = null;// new FFaplNodeToken(t1);
	//  }
  t1 = < IDENT >
  	  {
	    t3 = new FFaplNodeToken(t1);
	    t4 = new FFaplNodeListOpt();
	  }
  (
	    {
	      t8 = new FFaplNodeSequence();
	    }
    t1 = < COMMA >
      	{
	      t8.addNode(new FFaplNodeToken(t1));
	  	}
    t1 = < IDENT >
      	{
	      t8.addNode(new FFaplNodeToken(t1));
	      t4.addNode(t8);
	  	}
  )*
  t1 = < COLON >
  	  {
	    t5 = new FFaplNodeToken(t1);
	  }
  t6 = DeclType()
  t1 = < SEMICOLON >
  	  {
	    t7 = new FFaplNodeToken(t1);
	  }

  
 {
   return new ASTDecl(FFT_DECL, t3, t4, t5, t6, t7);
 }
}

ASTConstDecl ConstDecl() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t4, t6, t8;
  ASTExpr t7;
  ASTConstType t5;
}
{
  t1 = < CONST >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t1 = < IDENT >
  	{
  	  t3 = new FFaplNodeToken(t1);
  	}
  t1 = < COLON >

    {
  	  t4 = new FFaplNodeToken(t1);
  	}

  t5 = ConstType()
  
  t1 = < ASSIGN >
  	{
  	  t6 = new FFaplNodeToken(t1);
  	}

  t7 = Expr()
  
  t1 = < SEMICOLON >
  	{
  	  t8 = new FFaplNodeToken(t1);
  	}

  {
    return new ASTConstDecl(FFT_CONSTDECL, t2, t3, t4, t5, t6, t7, t8);
  }
}


ASTIdTerm IdTerm() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeOpt t3;
  FFaplNodeSequence t4;
  ASTPrimaryExpr t5;
}
{
     
     t1 = < IDENT > //Ident has to be x
	     {
	       t2 = new FFaplNodeToken(t1);
	       t3 = new FFaplNodeOpt();
	     }
     [//Node Optional
     		{
     		  t4 = new FFaplNodeSequence();
     		}
     	t1 = < POWER >
	     	{
	     	  t4.addNode(new FFaplNodeToken(t1));
	     	}
     	t5 = PrimaryExpr()
     		{
     		  t4.addNode(t5);
     		  t3.addNode(t4);
     		}
     ] 

     {
       return new ASTIdTerm(FFT_IDTERM, t2, t3);
     }
}

ASTTerm Term() throws FFaplException:
{
  FFaplNodeChoice t1;
  ASTPowExpr t2;
  ASTIdTerm t3;
  FFaplNodeSequence t4;
  FFaplNodeOpt t5;
  Token t6;
  int amount = 2;
}
{
   (
    LOOKAHEAD(2) 
	   		{
	   		  t4 = new FFaplNodeSequence();
	   		  t5 = new FFaplNodeOpt();
	   		}
   		[
     		t6 = < MINUS >
	     		{
	     		  t5.addNode(new FFaplNodeToken(t6));
	     		}
     	]
	     	{
	     	  t4.addNode(t5);
	     	}
	   	
	   	t3 = IdTerm()
		   	{
		   	     t4.addNode(t3);
		   		 t1 = new FFaplNodeChoice(t4, 1, amount);
		   	}
    |
       //LOOKAHEAD(10)
			{
			  t4 = new FFaplNodeSequence();
			}
		
     	t2 = PowExpr()
     		{
     		  t4.addNode(t2);
     		  t5 = new FFaplNodeOpt();
     		}
     		
     	[     		
     		t3 = IdTerm()
	     		{
	     		  t5.addNode(t3);
	     		}
     	]
	     	{
	     	  t4.addNode(t5);
	     	  t1 = new FFaplNodeChoice(t4, 0, amount);
	     	}
	// | 
   )
   {
     return new ASTTerm(FFT_TERM, t1);
   }
}




ASTECPoint ECPoint() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t4, t6;
  ASTExpr t3, t5;
}
{
  t1 =  < ECLEFT > 
  	{
		t2 = new FFaplNodeToken(t1);
  	}
  t3 = Expr()
  t1 = < COMMA >
  	{
		t4 = new FFaplNodeToken(t1);
	}
  t5 = Expr()
  t1 = < ECRIGHT > 
  	{
		t6 = new FFaplNodeToken(t1);
  	}

  	{
		return new ASTECPoint(FFT_ECPOINT, t2, t3, t4, t5, t6);
  	}
}


ASTECPAI ECPAI() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3;
}
{
  	t1 = < ECLEFT >
 	t1 = < ECPAI >
 	t1 = < ECRIGHT >
 	{
			return new ASTECPAI(FFT_ECPOINT);
 	}
}



ASTECRandom ECRandom() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int amount = 2;
}
{
  	t1 = < ECLEFT >
  	
  	  (
	  t1 = < ECRANDOM > 
	  {
			t2 = new FFaplNodeToken(t1);
			t3 = new FFaplNodeChoice(t2, 0, amount);
	  }
	|
	  t1 = <  ECRANDOMSUB >
	  {
			t2 = new FFaplNodeToken(t1);
	    	t3 = new FFaplNodeChoice(t2, 1, amount);
	  }
	)
 	t1 = < ECRIGHT >
 	{
			return new ASTECRandom(FFT_ECPOINT,t3);
 	}
}







ASTPolynomial Polynomial() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t5;
  ASTTerm t3, t7;
  FFaplNodeListOpt t4;
  ASTAddOp t6;
  FFaplNodeSequence t8;
}
{ 
  t1 = < SQUARED_BRACE_LEFT >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t3 = Term()
  	{
  	  t4 = new FFaplNodeListOpt();
  	}
  (
    	{
    	  t8 = new FFaplNodeSequence();
    	}
    t6 = AddOp()
    	{
    	  t8.addNode(t6);
    	}
    t7 = Term()
    	{
    	  t8.addNode(t7);
    	  t4.addNode(t8);
    	}
   )*
   t1 = < SQUARED_BRACE_RIGHT >
		{
		  t5 = new FFaplNodeToken(t1);
		}	
  {
    return new ASTPolynomial(FFT_POLYNOMIAL, t2, t3, t4, t5);
  }
}


ASTGF GF() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t5, t7;
  ASTExpr t4, t6;
  
}
{
  t1 = < GF >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t1 = < BRACE_LEFT >
  	{
  	  t3 = new FFaplNodeToken(t1);
  	}
  t4 = Expr()
  t1 = < COMMA >
  	{
  	  t5 = new FFaplNodeToken(t1);
  	}
  t6 = Expr()
  t1 = < BRACE_RIGHT >
  	{
  	  t7 = new FFaplNodeToken(t1);
  	}
  {
    return new ASTGF(FFT_GF, t2, t3, t4, t5, t6, t7);
  }
  
}



ASTEC EC() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t7;
  ASTGF t4;
  FFaplNodeListOpt t5;
  FFaplNodeSequence t6;

  ASTExpr t8;
  ASTExpr t9;
  boolean isGF;
  
}
{
  t1 = < EC >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	  t5 = new FFaplNodeListOpt();
  	}
  t1 = < BRACE_LEFT >
  	{
  	  t3 = new FFaplNodeToken(t1);
  	}
  (
  t4 = GF()
  	{
  		isGF = true;
  		t9  = null;
  	}
  |
  t1 = < RESIDUE >
     {
         isGF = false;
         t4 = null;
     }
   t1 = < BRACE_LEFT >
   t9 = Expr()
   t1 = < BRACE_RIGHT >
   
  )
  
  (//Optional List
    	{
    	  t6 = new FFaplNodeSequence();
    	}
    t1 = < COMMA >
    	{
	    	t6.addNode(new FFaplNodeToken(t1));
	  	}
    t1 = < IDENT > 
    	{
	    	t6.addNode(new FFaplNodeToken(t1));
	  	}
  	t1 = < ASSIGN >
  		{
			t6.addNode(new FFaplNodeToken(t1));
  		}
	t8 = Expr()
		{
			t6.addNode(t8);
			t5.addNode(t6);
		}
   )*

  t1 = < BRACE_RIGHT >
  	{
  	  t7 = new FFaplNodeToken(t1);
  	}
  {
  	if (isGF == true)
  	{
    	return new ASTEC(FFT_EC, t2, t3, t4, t5, t7);
	}
	else
	{ 
		return new ASTEC(FFT_EC, t2, t3, t9, t5, t7);
	}
  }
  
}



ASTRecord Record() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t4;
  FFaplNodeListOpt t3;
  ASTDecl t5;
}
{
  t1 = < RECORD >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	  t3 = new FFaplNodeListOpt();
  	} 
   (//Optional List
    	t5 = Decl()
		    {
		      t3.addNode(t5);
		    }
   )*
   t1 = < RECORD_END >
   	{
  	  t4 = new FFaplNodeToken(t1);
  	}
  {
    return new ASTRecord(FFT_RECORD, t2, t3, t4);
  }
}

ASTPsRandomGenerator PsRandomGenerator() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t5, t7;
  ASTExpr t4, t6;
}
{
  t1 = < PSEUDORANDOMGENERATOR >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t1 = < BRACE_LEFT >
  	  {
	    t3 = new FFaplNodeToken(t1);
	  }
  t4 = Expr()
  t1 = < COMMA >
      {
	    t5 = new FFaplNodeToken(t1);
	  }
  t6 = Expr()
  t1 = < BRACE_RIGHT >
      {
	    t7 = new FFaplNodeToken(t1);
	  }
  {
    return new ASTPsRandomGenerator(FFT_PSRANDOMGENERATOR, t2, t3, t4, t5, t6, t7);
  }
}


ASTFormalParam FormalParam() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t4;
  FFaplNodeListOpt t3;
  ASTParamType t5;
  FFaplNodeSequence t6;
}
{
  t1 = < IDENT >
	  {
	    t2 = new FFaplNodeToken(t1);
	    t3 = new FFaplNodeListOpt();
	  }
  (//Optional List
    	{
    	  t6 = new FFaplNodeSequence();
    	}
    t1 = < COMMA >
    	{
	    	t6.addNode(new FFaplNodeToken(t1));
	  	}
    t1 = < IDENT > 
    	{
	    	t6.addNode(new FFaplNodeToken(t1));
	    	t3.addNode(t6);
	  	}
   )*
   t1 = < COLON >
   	  {
	    t4 = new FFaplNodeToken(t1);
	  }
   t5 = ParamType()

   {
     return new ASTFormalParam(FFT_FORMALPARAM, t2, t3, t4, t5);
   }
}

ASTFormalParamList FormalParamList() throws FFaplException:
{
  ASTFormalParam t1, t5;
  FFaplNodeListOpt t2;
  FFaplNodeSequence t3;
  Token t4;
}
{
  t1 = FormalParam()
	  {
	    t2 = new FFaplNodeListOpt();
	  }
  (
	    {
	      t3 = new FFaplNodeSequence();
	    }
    t4 = < SEMICOLON >
    	{
    	  t3.addNode(new FFaplNodeToken(t4));
    	}
    t5 = FormalParam()
	    {
	      t3.addNode(t5);
	      t2.addNode(t3);
	    }
   )*

   {
     return new ASTFormalParamList(FFT_FORMALPARAMLIST, t1, t2);
   }
}

ASTProgram Program() throws FFaplException :
{
  Token t1;
  FFaplNodeToken t2, t3, t4, t8, t9;
  FFaplNodeListOpt t5, t6, t14;
  ASTStatementList t7;
  FFaplNodeChoice t10;
  ASTProc t11;
  ASTFunc t12;
  ASTDecl t13;
  ASTConstDecl t15;
  int amount = 2;
  
}
{
  t1 = < PROGRAM >
	  {
	    t2 = new FFaplNodeToken(t1);
	  }
  t1 = < IDENT >
	  {
	    _programName = t1.image;
	    t3 = new FFaplNodeToken(t1);
	  }
  t1 = < CURLY_BRACE_LEFT >
      {
	    t4 = new FFaplNodeToken(t1);
	    t14 = new FFaplNodeListOpt();
	  }

  (//Optional List
     t15 = ConstDecl()
	    {
	      t14.addNode(t15);
	    }
  )*

  	{
  	  t5 = new FFaplNodeListOpt();
  	}
  (//Optional List
    (
    		t11 = Proc()
    			{
    			  t10 = new FFaplNodeChoice(t11, 0, amount);
    			}
    	|
    		t12 = Func()
    			{
    			  t10 = new FFaplNodeChoice(t12, 1, amount);
    			}
    )
	    {
	      t5.addNode(t10);
	    }
   )*
   		{
   		  t6 = new FFaplNodeListOpt();
   		}
   (//Optional List
     LOOKAHEAD(2)
     t13 = Decl()
     	{
     	  t6.addNode(t13);
     	}
   )*

   t7 = StatementList()
   t1 = < CURLY_BRACE_RIGHT >
      {
	    t8 = new FFaplNodeToken(t1);
	  }
   t1 = < EOF >
      {
	    t9 = new FFaplNodeToken(t1);
	  }
  {
    return new ASTProgram(FFT_PROGRAM, t2, t3, t4, t14, t5, t6, t7, t8, t9);
  }
} 

ASTProc Proc() throws FFaplException: 
{
  Token t1;
  FFaplNodeToken t2, t3, t4, t6;
  FFaplNodeOpt t5;
  ASTBlock t7;
  ASTFormalParamList t8;
}
{
  t1 = < PROCEDURE >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t1 = < IDENT >
  	{
  	  t3 = new FFaplNodeToken(t1);
  	}
  t1 = < BRACE_LEFT >
  	{
  	  t4 = new FFaplNodeToken(t1);
  	  t5 = new FFaplNodeOpt();
  	}
  [
  	t8 = FormalParamList()
  		{
  		  t5.addNode(t8);
  		}
  ]
  t1 = < BRACE_RIGHT >
  	{
  	  t6 = new FFaplNodeToken(t1);
  	}
  t7 = Block()

  {
    return new ASTProc(FFT_PROC, t2, t3, t4, t5, t6, t7);
  }
}

ASTFunc Func() throws FFaplException:
{
  Token t1;
  FFaplNodeToken t2, t3, t4, t6, t7;
  FFaplNodeOpt t5;
  ASTParamType t8;
  ASTFuncBlock t9;
  ASTFormalParamList t10;
}
{
  t1 = < FUNCTION >
  	{
  	  t2 = new FFaplNodeToken(t1);
  	}
  t1 = < IDENT >
  	{
  	  t3 = new FFaplNodeToken(t1);
  	}
  t1 = < BRACE_LEFT >
  	{
  	  t4 = new FFaplNodeToken(t1);
  	  t5 = new FFaplNodeOpt();
  	}
  [
  	t10 = FormalParamList()
  		{
  		  t5.addNode(t10);
  		}
  ]
  t1 = < BRACE_RIGHT >
  	{
  	  t6 = new FFaplNodeToken(t1);
  	}
  t1 = < COLON >
  	{
  	  t7 = new FFaplNodeToken(t1);
  	}
  t8 = ParamType()
  t9 = FuncBlock()

  {
    return new ASTFunc(FFT_FUNC, t2, t3, t4, t5, t6, t7, t8, t9);
  }
}