/* FFaplInterpreterTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. FFaplInterpreterTokenManager.java */
package ffapl;
import java.io.*;
import ffapl.lib.interfaces.*;
import ffapl.java.interfaces.*;
import ffapl.lib.*;
import ffapl.exception.*;
import ffapl.ast.nodes.*;
import ffapl.ast.*;
import ffapl.visitor.*;
import ffapl.types.*;
import ffapl.java.logging.*;
import ffapl.java.exception.*;
import java.nio.charset.Charset;

/** Token Manager. */
@SuppressWarnings ("unused")
public class FFaplInterpreterTokenManager implements FFaplInterpreterConstants {

  /** Debug output. */
  private java.io.PrintStream debugStream = System.out;

  /**
   * @return debug output
   */
  public java.io.PrintStream getDebugStream() {
    return debugStream;
  }

  /**
   * Set debug output
   * @param ds debug PrintStream. May not be <code>null</code>
   */
  public void setDebugStream(final java.io.PrintStream ds) {
    debugStream = ds;
  }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 77;
            return 5;
         }
         if ((active0 & 0x40000000000L) != 0x0L)
            return 1;
         if ((active0 & 0x1000000L) != 0x0L || (active1 & 0x50000L) != 0x0L)
            return 15;
         if ((active0 & 0xfffffb800200fc00L) != 0x0L || (active1 & 0x3fL) != 0x0L)
         {
            jjmatchedKind = 76;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x40L) != 0x0L)
            return 6;
         if ((active1 & 0x40000L) != 0x0L)
            return 13;
         if ((active0 & 0x1a04010000000000L) != 0x0L)
            return 1;
         if ((active0 & 0xe5fbfa800200fc00L) != 0x0L || (active1 & 0x3fL) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0xe5f1f8000000f800L) != 0x0L || (active1 & 0x3fL) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0xa028002000400L) != 0x0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x450000000000000L) != 0x0L)
            return 1;
         if ((active0 & 0xe1a1f8000000f800L) != 0x0L || (active1 & 0x3fL) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0xe180d80000007800L) != 0x0L || (active1 & 0xfL) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x21200000008000L) != 0x0L || (active1 & 0x30L) != 0x0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x2180800000007800L) != 0x0L || (active1 & 0x8L) != 0x0L)
            return 1;
         if ((active0 & 0xc000580000000000L) != 0x0L || (active1 & 0x7L) != 0x0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 5;
            }
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x180000000000L) != 0x0L || (active1 & 0x1L) != 0x0L)
            return 1;
         if ((active0 & 0xc100400000001800L) != 0x0L || (active1 & 0x6L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active1 & 0x4L) != 0x0L)
            return 1;
         if ((active0 & 0xc100400000001800L) != 0x0L || (active1 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8100400000001800L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x4000000000000000L) != 0x0L || (active1 & 0x2L) != 0x0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x400000000000L) != 0x0L)
            return 1;
         if ((active0 & 0x8100000000001800L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x8100000000000000L) != 0x0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 10;
            }
            return 1;
         }
         if ((active0 & 0x1800L) != 0x0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x8100000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x8100000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x8100000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x8000000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 14;
            return 1;
         }
         if ((active0 & 0x100000000000000L) != 0x0L)
            return 1;
         return -1;
      case 15:
         if ((active0 & 0x8000000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x8000000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x8000000000001000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 18;
            return 1;
         }
         if ((active0 & 0x1000L) != 0x0L)
            return 1;
         return -1;
      case 19:
         if ((active0 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 19;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case '!':
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case '#':
         return jjStopAtPos(0, 26);
      case '(':
         return jjStopAtPos(0, 31);
      case ')':
         return jjStopAtPos(0, 32);
      case '*':
         return jjStopAtPos(0, 23);
      case '+':
         return jjStopAtPos(0, 21);
      case ',':
         return jjStopAtPos(0, 36);
      case '-':
         return jjStopAtPos(0, 22);
      case '.':
         return jjStopAtPos(0, 33);
      case '/':
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50000L);
      case '0':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case ':':
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case ';':
         return jjStopAtPos(0, 35);
      case '<':
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x10100L, 0x0L);
      case '=':
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case '>':
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x20200L, 0x0L);
      case 'A':
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 'B':
         return jjMoveStringLiteralDfa1_0(0x10000000c000L, 0x0L);
      case 'E':
         return jjMoveStringLiteralDfa1_0(0x4800000000000000L, 0x0L);
      case 'G':
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 'I':
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 'O':
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 'P':
         return jjMoveStringLiteralDfa1_0(0x8000600000000400L, 0x0L);
      case 'R':
         return jjMoveStringLiteralDfa1_0(0x2180000000001800L, 0x0L);
      case 'S':
         return jjMoveStringLiteralDfa1_0(0x800000002000L, 0x0L);
      case 'X':
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 'Z':
         return jjStartNfaWithStates_0(0, 42, 1);
      case '[':
         return jjStopAtPos(0, 27);
      case ']':
         return jjStopAtPos(0, 28);
      case '^':
         return jjStopAtPos(0, 38);
      case 'b':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 'c':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa1_0(0x28000000000000L, 0x4L);
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 'p':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 's':
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 't':
         return jjMoveStringLiteralDfa1_0(0x210000000000000L, 0x0L);
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case '{':
         return jjStopAtPos(0, 29);
      case '}':
         return jjStopAtPos(0, 30);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case '*':
         if ((active1 & 0x40000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 82, 13);
         break;
      case '/':
         if ((active1 & 0x10000L) != 0x0L)
            return jjStopAtPos(1, 80);
         break;
      case '<':
         if ((active0 & 0x100L) != 0x0L)
            return jjStopAtPos(1, 8);
         break;
      case '=':
         if ((active0 & 0x10000L) != 0x0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0x0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0x0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0x0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x400000000L) != 0x0L)
            return jjStopAtPos(1, 34);
         break;
      case '>':
         if ((active0 & 0x200L) != 0x0L)
            return jjStopAtPos(1, 9);
         break;
      case 'A':
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x0L);
      case 'C':
         if ((active0 & 0x800000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 59, 1);
         break;
      case 'F':
         if ((active0 & 0x1000000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 60, 1);
         break;
      case 'N':
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x0L);
      case 'O':
         return jjMoveStringLiteralDfa2_0(active0, 0x20002000000L, active1, 0x0L);
      case 'R':
         if ((active0 & 0x10000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 40, 1);
         break;
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x1a000000000f800L, active1, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000000000000L, active1, 0x8L);
      case 'f':
         if ((active0 & 0x4000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 50, 1);
         break;
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa2_0(active0, 0x4000080000000000L, active1, 0x0L);
      case 'o':
         if ((active0 & 0x200000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 57, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x8500000000000L, active1, 0x10L);
      case 'r':
         return jjMoveStringLiteralDfa2_0(active0, 0x10200000000000L, active1, 0x23L);
      case 's':
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x0L);
      case 't':
         return jjMoveStringLiteralDfa2_0(active0, 0x400800000000000L, active1, 0x0L);
      case 'u':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x4L);
      case 'x':
         if ((active1 & 0x40L) != 0x0L)
            return jjStartNfaWithStates_0(1, 70, 6);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'D':
         if ((active0 & 0x2000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 25, 1);
         else if ((active0 & 0x8000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 39, 1);
         break;
      case 'I':
         if ((active0 & 0x400L) != 0x0L)
            return jjStartNfaWithStates_0(2, 10, 1);
         break;
      case 'R':
         if ((active0 & 0x20000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 41, 1);
         break;
      case 'c':
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x0L);
      case 'd':
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000000000000L, active1, 0x20L);
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000L, active1, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000000000L, active1, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000001800L, active1, 0x14L);
      case 'o':
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x3L);
      case 'r':
         if ((active0 & 0x8000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 51, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x0L);
      case 's':
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000c000L, active1, 0x0L);
      case 't':
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x8L);
      case 'u':
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x0L);
      case 'w':
         if ((active0 & 0x2000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 49, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'R':
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x0L);
      case 'a':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x20L);
      case 'c':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x6L);
      case 'd':
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000001800L, active1, 0x0L);
      case 'e':
         if ((active0 & 0x10000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 52, 1);
         else if ((active0 & 0x40000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 54, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000e000L, active1, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x1L);
      case 'i':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa4_0(active0, 0x1100000000000L, active1, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x0L);
      case 'p':
         if ((active0 & 0x400000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 58, 1);
         break;
      case 's':
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x10L);
      case 'u':
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x8L);
      case 'y':
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x0L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0x0L);
      case 'G':
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x0L);
      case 'Z':
         if ((active0 & 0x8000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 15, 1);
         break;
      case 'd':
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x0L);
      case 'e':
         if ((active0 & 0x200000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 45, 1);
         else if ((active0 & 0x1000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 48, 1);
         else if ((active0 & 0x20000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 53, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000100000000000L, active1, 0x2L);
      case 'g':
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x0L);
      case 'k':
         if ((active1 & 0x20L) != 0x0L)
            return jjStartNfaWithStates_0(4, 69, 1);
         break;
      case 'n':
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000L, active1, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000001800L, active1, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x9L);
      case 't':
         if ((active1 & 0x10L) != 0x0L)
            return jjStartNfaWithStates_0(4, 68, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x4L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'F':
         if ((active0 & 0x4000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 14, 1);
         break;
      case 'a':
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x1L);
      case 'c':
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x0L);
      case 'd':
         if ((active0 & 0x2000000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 61, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x2L);
      case 'e':
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x0L);
      case 'g':
         if ((active0 & 0x800000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 47, 1);
         break;
      case 'i':
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x4L);
      case 'm':
         if ((active0 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000001800L, active1, 0x0L);
      case 'n':
         if ((active1 & 0x8L) != 0x0L)
            return jjStartNfaWithStates_0(5, 67, 1);
         break;
      case 'o':
         return jjMoveStringLiteralDfa6_0(active0, 0x8000400000000000L, active1, 0x0L);
      case 's':
         if ((active0 & 0x2000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 13, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'G':
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x0L);
      case 'P':
         return jjMoveStringLiteralDfa7_0(active0, 0x1800L, active1, 0x0L);
      case 'R':
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x0L);
      case 'm':
         if ((active1 & 0x1L) != 0x0L)
            return jjStartNfaWithStates_0(6, 64, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x0L);
      case 'n':
         if ((active0 & 0x100000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 44, 1);
         break;
      case 'o':
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x4L);
      case 'r':
         if ((active0 & 0x80000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 43, 1);
         break;
      case 'u':
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x2L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x0L);
      case 'n':
         if ((active1 & 0x4L) != 0x0L)
            return jjStartNfaWithStates_0(7, 66, 1);
         break;
      case 'o':
         return jjMoveStringLiteralDfa8_0(active0, 0x1800L, active1, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x2L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0x0L);
      case 'd':
         if ((active0 & 0x4000000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 62, 1);
         break;
      case 'e':
         if ((active1 & 0x2L) != 0x0L)
            return jjStartNfaWithStates_0(8, 65, 1);
         break;
      case 'i':
         return jjMoveStringLiteralDfa9_0(active0, 0x1800L, active1, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa9_0(active0, 0x8100000000000000L, active1, 0x0L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'd':
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L);
      case 'e':
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L);
      case 'l':
         if ((active0 & 0x400000000000L) != 0x0L)
            return jjStartNfaWithStates_0(9, 46, 1);
         break;
      case 'n':
         return jjMoveStringLiteralDfa10_0(active0, 0x1800L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 10;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'o':
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L);
      case 'r':
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L);
      case 't':
         if ((active0 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 11;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'S':
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 'a':
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);
      case 'm':
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 12;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'G':
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L);
      case 't':
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L);
      case 'u':
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 13;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'b':
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      case 'e':
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L);
      case 'o':
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 14;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 'n':
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L);
      case 'r':
         if ((active0 & 0x100000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(14, 56, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 15;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'e':
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L);
      case 'i':
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 16;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'e':
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
      case 'r':
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 17;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000000L);
      case 'l':
         return jjMoveStringLiteralDfa18_0(active0, 0x1000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 18;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'd':
         if ((active0 & 0x1000L) != 0x0L)
            return jjStartNfaWithStates_0(18, 12, 1);
         break;
      case 't':
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 19;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'o':
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 20;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 'r':
         if ((active0 & 0x8000000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(20, 63, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0x0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 48)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 48 && kind > 77)
                     kind = 77;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0x0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 13:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xffff7fffffffffffL & l) != 0x0L && kind > 81)
                     kind = 81;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(1); }
                  break;
               case 5:
                  if (curChar != 120)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7e0000007eL & l) == 0x0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(6); }
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  { jjAddStates(0, 2); }
                  break;
               case 14:
                  if (kind > 81)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 17 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0x0L)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 83)
                     kind = 83;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 3 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_2(0x100000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active1){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case '/':
         if ((active1 & 0x100000L) != 0x0L)
            return jjStopAtPos(1, 84);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_3(0x200000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(1, active1)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case '/':
         if ((active1 & 0x200000L) != 0x0L)
            return jjStopAtPos(1, 85);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\75", "\74", "\76", "\74\74", "\76\76", 
"\120\101\111", "\122\141\156\144\157\155\120\157\151\156\164", 
"\122\141\156\144\157\155\120\157\151\156\164\123\165\142\146\151\145\154\144", "\123\141\155\145\101\163", "\102\141\163\145\107\106", "\102\141\163\145\132", 
"\74\75", "\76\75", "\75\75", "\41\75", "\41", "\53", "\55", "\52", "\57", 
"\115\117\104", "\43", "\133", "\135", "\173", "\175", "\50", "\51", "\56", "\72\75", "\73", 
"\54", "\72", "\136", "\101\116\104", "\117\122", "\130\117\122", "\132", 
"\111\156\164\145\147\145\162", "\102\157\157\154\145\141\156", "\120\162\151\155\145", 
"\120\157\154\171\156\157\155\151\141\154", "\123\164\162\151\156\147", "\167\150\151\154\145", "\156\145\167", "\151\146", 
"\146\157\162", "\164\162\165\145", "\146\141\154\163\145", "\145\154\163\145", 
"\122\141\156\144\157\155", "\122\141\156\144\157\155\107\145\156\145\162\141\164\157\162", "\164\157", 
"\163\164\145\160", "\105\103", "\107\106", "\122\145\143\157\162\144", 
"\105\156\144\122\145\143\157\162\144", 
"\120\163\145\165\144\157\122\141\156\144\157\155\107\145\156\145\162\141\164\157\162", "\160\162\157\147\162\141\155", "\160\162\157\143\145\144\165\162\145", 
"\146\165\156\143\164\151\157\156", "\162\145\164\165\162\156", "\143\157\156\163\164", "\142\162\145\141\153", 
"\60\170", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   10, 11, 12, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try {
           input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0x0L)
         {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
               curChar = input_stream.beginToken();
         }
         }
         catch (final java.io.IOException e1) {
           continue EOFLoop;
         }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 86)
         {
           debugStream.println("   Current character matched as a " + tokenImage[86] + " token.");
            jjmatchedKind = 86;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 86)
         {
           debugStream.println("   Current character matched as a " + tokenImage[86] + " token.");
            jjmatchedKind = 86;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 86)
         {
           debugStream.println("   Current character matched as a " + tokenImage[86] + " token.");
            jjmatchedKind = 86;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
        {
           debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
           input_stream.backup(curPos - jjmatchedPos - 1);
        }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrException.addEscapes(new String(input_stream.getSuffix(jjmatchedPos + 1))) + ") ******\n");
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
           continue;
        }
        catch (final java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try {
       input_stream.readChar();
       input_stream.backup(1);
     }
     catch (final java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.getImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.getImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
   }
  }
}

protected static final class States {
  protected static final int[][][] statesForState = {
 {
   { 0, 2, 3, 7, 8, 16, },
   { 1 },
   { 0, 2, 3, 7, 8, 16, },
   { 0, 2, 3, 7, 8, 16, },
   { 4 },
   { 5 },
   { 6 },
   { 0, 2, 3, 7, 8, 16, },
   { 0, 2, 3, 7, 8, 16, },
   { 9 },
   { 10 },
   { 11 },
   { 12 },
   { 13 },
   { 14 },
   { 15 },
   { 0, 2, 3, 7, 8, 16, },
},
 {
   { 0, 2, },
   { 1 },
   { 0, 2, },
},
 {},
 {},

};
}
protected static final class Kinds {
  protected static final int[][] kindForState = {
{ 
  76, 
  76, 
  77, 
  77, 
  77, 
  78, 
  78, 
  78, 
  79, 
  79, 
  79, 
  79, 
  79, 
  81, 
  81, 
  81, 
  81, },
{ 
  83, 
  83, 
  83, },
{}
,
{}

};
}  int kindCnt = 0;
  protected final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[87];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = States.statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[Kinds.kindForState[lexState][state]])
       {
          kindDone[Kinds.kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[Kinds.kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 81 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public FFaplInterpreterTokenManager(JavaCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public FFaplInterpreterTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xf07fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x380000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x380000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x470000L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[17];
    private final int[] jjstateSet = new int[2 * 17];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
