/* FFaplInterpreter.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. FFaplInterpreter.java */
package ffapl;
import java.io.*;
import ffapl.lib.interfaces.*;
import ffapl.java.interfaces.*;
import ffapl.lib.*;
import ffapl.exception.*;
import ffapl.ast.nodes.*;
import ffapl.ast.*;
import ffapl.visitor.*;
import ffapl.types.*;
import ffapl.java.logging.*;
import ffapl.java.exception.*;
import java.nio.charset.Charset;

/**
 * @author Alexander Ortner
 * @version 1.0
 *
 */
public class FFaplInterpreter extends Thread implements FFaplASTreeConstants, FFaplInterpreterConstants {
  private static String _programName = "";
  private FFaplLogger _logger;
  private FFaplSymbolTypeCheckingVisitor _symbolVisit;
  private FFaplJavaInterpreterVisitor _javaInterpreter;
  private FFaplSymbolTable _symbolTable;
  private ASTProgram _root;
  public static boolean _interrupted;

  /**
   * @param logger
   * @param reader 
   */
  public FFaplInterpreter(FFaplLogger logger, Reader reader)
  {
  this(reader);
  _logger = logger;
  _interrupted = false;

  }

  /**
   * @param logger
   * @param stream 
   */
  public FFaplInterpreter(FFaplLogger logger, InputStream stream)
  {
  this(stream, Charset.forName("UTF-8"));
  _logger = logger;
  _interrupted = false;

  }

  public FFaplLogger getLogger(){
        return _logger;
  }

  /**
  * Start to parse and interpret the code
  */
  public void run()
  {
       try
       {
   _root = Program();
   //generate SymbolTable
         _symbolTable = new FFaplSymbolTable();
         //Symbol and Type checking
         _symbolVisit = new FFaplSymbolTypeCheckingVisitor(_symbolTable, _logger, this);
         _symbolVisit.visit(_root, null);
         //interpret        	
         _javaInterpreter = new FFaplJavaInterpreterVisitor(_symbolTable, _logger, this);
         _javaInterpreter.visit(_root, null);
     }catch(ParseException pe){
      _logger.log(ILevel.ERROR,
         CompilerMessage.getError((ICompilerError) pe, _programName));
     }catch(TokenMgrException te){
      _logger.log(ILevel.ERROR,
         CompilerMessage.getError((ICompilerError) te, _programName));
     }catch(FFaplAlgebraicException e){
   _logger.log(ILevel.ERROR, CompilerMessage.getError((ICompilerError) e, _programName),
               e.errorLine(),
               e.errorColumn());
  }catch(FFaplException ffe){
      _logger.log(ILevel.ERROR, CompilerMessage.getError((ICompilerError) ffe, _programName),
                  ffe.errorLine(),
                  ffe.errorColumn());
     }/*catch(Exception general)
    	{
    	   Object[] arguments = {FFaplException.getCustomStackTrace(general)};
			_logger.log(ILevel.ERROR, (new FFaplException(arguments, ICompilerError.INTERNAL)).getErrorMessage());
    	}*/
  }

/* ----- ENDCOMMENTS ------ */





/* Operations */
  final public 
ASTRelOp RelOp() throws ParseException, FFaplException {
    trace_call("RelOp");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 4;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case LOWER_EQUAL:{
        t1 = jj_consume_token(LOWER_EQUAL);
pos = 0;
        break;
        }
      case GREATER_EQUAL:{
        t1 = jj_consume_token(GREATER_EQUAL);
pos = 1;
        break;
        }
      case GREATER:{
        t1 = jj_consume_token(GREATER);
pos = 2;
        break;
        }
      case LOWER:{
        t1 = jj_consume_token(LOWER);
pos = 3;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
t2 = new FFaplNodeToken(t1);
 t3 = new FFaplNodeChoice(t2, pos, amount);
    {if ("" != null) return new ASTRelOp(FFT_RELOP, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("RelOp");
    }
}

  final public ASTEqualOp EqualOp() throws ParseException, FFaplException {
    trace_call("EqualOp");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 2;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case EQUAL:{
        t1 = jj_consume_token(EQUAL);
pos = 0;
        break;
        }
      case NOT_EQUAL:{
        t1 = jj_consume_token(NOT_EQUAL);
pos = 1;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
t2 = new FFaplNodeToken(t1);
 t3 = new FFaplNodeChoice(t2, pos, amount);
    {if ("" != null) return new ASTEqualOp(FFT_EQUALOP, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("EqualOp");
    }
}

  final public ASTAddOp AddOp() throws ParseException, FFaplException {
    trace_call("AddOp");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 2;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PLUS:{
        t1 = jj_consume_token(PLUS);
pos = 0;
        break;
        }
      case MINUS:{
        t1 = jj_consume_token(MINUS);
pos = 1;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
t2 = new FFaplNodeToken(t1);
 t3 = new FFaplNodeChoice(t2, pos, amount);
    {if ("" != null) return new ASTAddOp(FFT_ADDOP, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("AddOp");
    }
}

  final public ASTMulOp MulOp() throws ParseException, FFaplException {
    trace_call("MulOp");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int pos = 0;
  int amount = 3;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case MULTIPLY:{
        t1 = jj_consume_token(MULTIPLY);
pos = 0;
        break;
        }
      case DIVIDE:{
        t1 = jj_consume_token(DIVIDE);
pos = 1;
        break;
        }
      case MODULO:{
        t1 = jj_consume_token(MODULO);
pos = 2;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
t2 = new FFaplNodeToken(t1);
 t3 = new FFaplNodeChoice(t2, pos, amount);
    {if ("" != null) return new ASTMulOp(FFT_MULOP, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("MulOp");
    }
}

  final public ASTRandom Random() throws ParseException, FFaplException {
    trace_call("Random");
    try {
Token t1;
 FFaplNodeOpt t2;
 FFaplNodeToken t3;
 ASTExpr t4;
 FFaplNodeSequence t5;
 FFaplNodeOpt t6;
 FFaplNodeSequence t7;
      t1 = jj_consume_token(RANDOM);
t3 = new FFaplNodeToken(t1);
    t2 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case BRACE_LEFT:{
t5 = new FFaplNodeSequence();
        t1 = jj_consume_token(BRACE_LEFT);
t5.addNode(new FFaplNodeToken(t1));
        t4 = Expr();
t5.addNode(t4);
         t6 = new FFaplNodeOpt();
         t5.addNode(t6);//adds Optional Node to Sequence

        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COLON:{
t7 = new FFaplNodeSequence();
          t1 = jj_consume_token(COLON);
t7.addNode(new FFaplNodeToken(t1));
          t4 = Expr();
t7.addNode(t4);
            t6.addNode(t7);//adds sequence to optional node

          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        t1 = jj_consume_token(BRACE_RIGHT);
t5.addNode(new FFaplNodeToken(t1));
       t2.addNode(t5); //adds Sequence to Optional Node

        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
{if ("" != null) return new ASTRandom(FFT_RANDOM, t3, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Random");
    }
}

  final public ASTRandomGenerator RandomGenerator() throws ParseException, FFaplException {
    trace_call("RandomGenerator");
    try {
Token t1;
  ASTExpr t2;
  FFaplNodeToken t3, t4, t5;
  FFaplNodeOpt t6;
  FFaplNodeSequence t7;
  ASTExpr t8;
      t1 = jj_consume_token(RANDOMGENERATOR);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t4 = new FFaplNodeToken(t1);
      t2 = Expr();
t6 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case COLON:{
t7 = new FFaplNodeSequence();
        t1 = jj_consume_token(COLON);
t7.addNode(new FFaplNodeToken(t1));
        t8 = Expr();
t7.addNode(t8);
        t6.addNode(t7);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      t1 = jj_consume_token(BRACE_RIGHT);
t5 = new FFaplNodeToken(t1);
       {if ("" != null) return new ASTRandomGenerator(FFT_RANDOMGENERATOR, t3, t4, t2, t6, t5);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("RandomGenerator");
    }
}

  final public ASTLiteral Literal() throws ParseException, FFaplException {
    trace_call("Literal");
    try {
Token t1;
  FFaplNodeChoice t2;
  FFaplNodeToken t3;
  ASTRandom t4;
  ASTPolynomial t5;
  int amount = 7;
  FFaplNodeType t6;
  ASTECPoint t7;
  ASTECPAI t8;
  ASTECRandom t9;
t6 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case TRUE:{
        t1 = jj_consume_token(TRUE);
t6.setType(new FFaplBoolean(true));
      t6.addNode(new FFaplNodeToken(t1));
      t2 = new FFaplNodeChoice(t6, 0, amount);
        break;
        }
      case FALSE:{
        t1 = jj_consume_token(FALSE);
t6.setType(new FFaplBoolean(false));
      t6.addNode(new FFaplNodeToken(t1));
      t2 = new FFaplNodeChoice(t6, 1, amount);
        break;
        }
      case RANDOM:{
        t4 = Random();
t6.setType(new FFaplRandom());
      t6.addNode(t4);
      t2 = new FFaplNodeChoice(t6, 2, amount);
        break;
        }
      case NUMBER:{
        t1 = jj_consume_token(NUMBER);
t6.setType(new FFaplInteger(t1.image));
      t6.addNode(new FFaplNodeToken(t1));
      t2 = new FFaplNodeChoice(t6, 3, amount);
        break;
        }
      case HEXNUMBER:{
        t1 = jj_consume_token(HEXNUMBER);
t6.setType(new FFaplInteger(t1.image));
      t6.addNode(new FFaplNodeToken(t1));
      t2 = new FFaplNodeChoice(t6, 3, amount);
        break;
        }
      case SQUARED_BRACE_LEFT:{
        t5 = Polynomial();
t6.setType(new FFaplPolynomial());
      t6.addNode(t5);
      t2 = new FFaplNodeChoice(t6, 4, amount);
        break;
        }
      case STRING:{
        t1 = jj_consume_token(STRING);
t6.setType(new FFaplString(t1.image));
        t6.addNode(new FFaplNodeToken(t1));
        t2 = new FFaplNodeChoice(t6, 5, amount);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        if (jj_2_1(2)) {
          t7 = ECPoint();
t6.setType(new FFaplEllipticCurve());
      t6.addNode(t7);
      t2 = new FFaplNodeChoice(t6, 6, amount);
        } else if (jj_2_2(2)) {
          t8 = ECPAI();
t6.setType(new FFaplEllipticCurve());
      t6.addNode(t8);
      t2 = new FFaplNodeChoice(t6, 6, amount);
        } else if (jj_2_3(2)) {
          t9 = ECRandom();
t6.setType(new FFaplEllipticCurve());
   t6.addNode(t9);
   t2 = new FFaplNodeChoice(t6, 6, amount);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new ASTLiteral(FFT_LITERAL, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Literal");
    }
}

  final public ASTSelector Selector() throws ParseException, FFaplException {
    trace_call("Selector");
    try {
Token t1;
 FFaplNodeChoice t2;
 FFaplNodeToken t3;
 FFaplNodeSequence t4;
 ASTExpr t5;
 ASTSelector t6;
 FFaplNodeOpt t7;
 int amount = 2; //Amount of choices

      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case SQUARED_BRACE_LEFT:{
t4 = new FFaplNodeSequence();
        //start sequence
            t1 = jj_consume_token(SQUARED_BRACE_LEFT);
t4.addNode(new FFaplNodeToken(t1));
        t5 = Expr();
t4.addNode(t5);
        t1 = jj_consume_token(SQUARED_BRACE_RIGHT);
t4.addNode(new FFaplNodeToken(t1));
      t7 = new FFaplNodeOpt();
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case SQUARED_BRACE_LEFT:
        case DOT:{
          //Optional Node
               t6 = Selector();
t7.addNode(t6);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
t4.addNode(t7);
       t2 = new FFaplNodeChoice(t4, 0, amount);
        break;
        }
      case DOT:{
t4 = new FFaplNodeSequence();
        //start sequence
            t1 = jj_consume_token(DOT);
t4.addNode(new FFaplNodeToken(t1));
        t1 = jj_consume_token(IDENT);
t4.addNode(new FFaplNodeToken(t1));
      t7 = new FFaplNodeOpt();
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case SQUARED_BRACE_LEFT:
        case DOT:{
          //Optional
               t6 = Selector();
t7.addNode(t6);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
t4.addNode(t7);
       t2 = new FFaplNodeChoice(t4, 1, amount);//adds sequence to choice

        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTSelector(FFT_SELECTOR, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Selector");
    }
}

  final public ASTArrayLen ArrayLen() throws ParseException, FFaplException {
    trace_call("ArrayLen");
    try {
Token t1;
 FFaplNodeOpt t2;
 ASTSelector t3;
 FFaplNodeToken t4, t5;
      t1 = jj_consume_token(HASH_KEY);
t4 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
t5 = new FFaplNodeToken(t1);
    t2 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case SQUARED_BRACE_LEFT:
      case DOT:{
        //Optional
            t3 = Selector();
t2.addNode(t3);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
{if ("" != null) return new ASTArrayLen(FFT_ARRAYLEN, t4, t5, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ArrayLen");
    }
}

  final public ASTPrimaryExpr PrimaryExpr() throws ParseException, FFaplException {
    trace_call("PrimaryExpr");
    try {
Token t1;
 FFaplNodeChoice t2;
 FFaplNodeSequence t3;
 ASTLiteral t4;
 ASTExpr t5;
 ASTProcFuncCall t6;
 ASTSelector t7;
 ASTArrayLen t8;
 FFaplNodeOpt t9;
 ASTArgumentList t10;
 int amount = 6;//amount of choices

      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ECLEFT:
      case SQUARED_BRACE_LEFT:
      case TRUE:
      case FALSE:
      case RANDOM:
      case NUMBER:
      case HEXNUMBER:
      case STRING:{
        t4 = Literal();
t2 = new FFaplNodeChoice(t4, 0, amount);
        break;
        }
      case BRACE_LEFT:{
t3 = new FFaplNodeSequence();
        t1 = jj_consume_token(BRACE_LEFT);
t3.addNode(new FFaplNodeToken(t1));
        t5 = Expr();
t3.addNode(t5);
        t1 = jj_consume_token(BRACE_RIGHT);
t3.addNode(new FFaplNodeToken(t1));
     t2 = new FFaplNodeChoice(t3, 1, amount);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_4(2)) {
          t6 = ProcFuncCall();
t2 = new FFaplNodeChoice(t6, 2, amount);
        } else {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case IDENT:{
t3 = new FFaplNodeSequence();
            t1 = jj_consume_token(IDENT);
t3.addNode(new FFaplNodeToken(t1));
     t9 = new FFaplNodeOpt();
            switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
            case SQUARED_BRACE_LEFT:
            case DOT:{
              t7 = Selector();
t9.addNode(t7);
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              ;
            }
t3.addNode(t9);
        t2 = new FFaplNodeChoice(t3, 3, amount);
            break;
            }
          case HASH_KEY:{
            t8 = ArrayLen();
t2 = new FFaplNodeChoice(t8, 4, amount);
            break;
            }
          case CURLY_BRACE_LEFT:{
t3 = new FFaplNodeSequence();
            t1 = jj_consume_token(CURLY_BRACE_LEFT);
t3.addNode(new FFaplNodeToken(t1));
            t10 = ArgumentList();
t3.addNode(t10);
            t1 = jj_consume_token(CURLY_BRACE_RIGHT);
t3.addNode(new FFaplNodeToken(t1));
     t2 = new FFaplNodeChoice(t3, 5, amount);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
{if ("" != null) return new ASTPrimaryExpr(FFT_PRIMARYEXPR, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("PrimaryExpr");
    }
}

  final public ASTUnaryExpr UnaryExpr() throws ParseException, FFaplException {
    trace_call("UnaryExpr");
    try {
Token t5;
  ASTAddOp t1;
  ASTPrimaryExpr t2;
  FFaplNodeOpt t3;
  FFaplNodeChoice t4;
  int amount = 2;
t3 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:{
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case PLUS:
        case MINUS:{
          t1 = AddOp();
t4 = new FFaplNodeChoice(t1, 0, amount);
          break;
          }
        case NOT:{
          //or
             t5 = jj_consume_token(NOT);
t4 = new FFaplNodeChoice(new FFaplNodeToken(t5), 1, amount);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
t3.addNode(t4);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      t2 = PrimaryExpr();
{if ("" != null) return new ASTUnaryExpr(FFT_UNARYEXPR, t3, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("UnaryExpr");
    }
}

  final public ASTPowExpr PowExpr() throws ParseException, FFaplException {
    trace_call("PowExpr");
    try {
Token t1;
  ASTUnaryExpr t2, t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
      t2 = UnaryExpr();
t4 = new FFaplNodeListOpt();
      label_1:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case POWER:{
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_1;
        }
t5 = new FFaplNodeSequence();
        t1 = jj_consume_token(POWER);
t5.addNode(new FFaplNodeToken(t1));
        t3 = UnaryExpr();
t5.addNode(t3);
       t4.addNode(t5);
      }
{if ("" != null) return new ASTPowExpr(FFT_POWEXPR, t2, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("PowExpr");
    }
}

  final public ASTMulExpr MulExpr() throws ParseException, FFaplException {
    trace_call("MulExpr");
    try {
ASTPowExpr t1, t2;
  ASTMulOp t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
      t1 = PowExpr();
t4 = new FFaplNodeListOpt();
      label_2:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MODULO:{
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_2;
        }
t5 = new FFaplNodeSequence();
        t3 = MulOp();
t5.addNode(t3);
        t2 = PowExpr();
t5.addNode(t2);
       t4.addNode(t5);
      }
{if ("" != null) return new ASTMulExpr(FFT_MULEXPR, t1, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("MulExpr");
    }
}

  final public ASTAddExpr AddExpr() throws ParseException, FFaplException {
    trace_call("AddExpr");
    try {
ASTMulExpr t1;
  FFaplNodeListOpt t2 = new FFaplNodeListOpt();
  FFaplNodeSequence t3 = null;
  ASTAddOp t4;
  ASTMulExpr t5;
      t1 = MulExpr();
      label_3:
      while (true) {
        if (jj_2_5(2)) {
        } else {
          break label_3;
        }
t3 = new FFaplNodeSequence();
        t4 = AddOp();
        t5 = MulExpr();
t3.addNode(t4);//adds node to sequence
      t3.addNode(t5);//adds node to sequence
      t2.addNode(t3);//adds Sequence to Optional List

      }
{if ("" != null) return new ASTAddExpr(FFT_ADDEXPR, t1, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("AddExpr");
    }
}

  final public ASTRelExpr RelExpr() throws ParseException, FFaplException {
    trace_call("RelExpr");
    try {
ASTAddExpr t1, t2;
  ASTRelOp t3;
  FFaplNodeOpt t4;
  FFaplNodeSequence t5;
      t1 = AddExpr();
t4 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case LOWER:
      case GREATER:
      case LOWER_EQUAL:
      case GREATER_EQUAL:{
t5 = new FFaplNodeSequence();
        t3 = RelOp();
t5.addNode(t3);
        t2 = AddExpr();
t5.addNode(t2);
      t4.addNode(t5);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
{if ("" != null) return new ASTRelExpr(FFT_RELEXPR, t1, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("RelExpr");
    }
}

  final public ASTEqualExpr EqualExpr() throws ParseException, FFaplException {
    trace_call("EqualExpr");
    try {
ASTRelExpr t1, t2;
  ASTEqualOp t3;
  FFaplNodeOpt t4;
  FFaplNodeSequence t5;
      t1 = RelExpr();
t4 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:{
t5 = new FFaplNodeSequence();
        t3 = EqualOp();
t5.addNode(t3);
        t2 = RelExpr();
t5.addNode(t2);
      t4.addNode(t5);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
{if ("" != null) return new ASTEqualExpr(FFT_EQUALEXPR, t1, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("EqualExpr");
    }
}

  final public ASTCondOrExpr CondOrExpr() throws ParseException, FFaplException {
    trace_call("CondOrExpr");
    try {
ASTCondAndExpr t1, t2;
  Token t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
      t1 = CondAndExpr();
t4 = new FFaplNodeListOpt();
      label_4:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case OR:{
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_4;
        }
t5 = new FFaplNodeSequence();
        t3 = jj_consume_token(OR);
t5.addNode(new FFaplNodeToken(t3));
        t2 = CondAndExpr();
t5.addNode(t2);
      t4.addNode(t5);
      }
{if ("" != null) return new ASTCondOrExpr(FFT_CONDOREXPR, t1, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("CondOrExpr");
    }
}

  final public ASTCondAndExpr CondAndExpr() throws ParseException, FFaplException {
    trace_call("CondAndExpr");
    try {
ASTEqualExpr t1, t2;
  Token t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
      t1 = EqualExpr();
t4 = new FFaplNodeListOpt();
      label_5:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case AND:{
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_5;
        }
t5 = new FFaplNodeSequence();
        t3 = jj_consume_token(AND);
t5.addNode(new FFaplNodeToken(t3));
        t2 = EqualExpr();
t5.addNode(t2);
      t4.addNode(t5);
      }
{if ("" != null) return new ASTCondAndExpr(FFT_CONDANDEXPR, t1, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("CondAndExpr");
    }
}

  final public ASTCreationExpr CreationExpr() throws ParseException, FFaplException {
    trace_call("CreationExpr");
    try {
Token t1;
  FFaplNodeToken t2;
  ASTArrayType t3;
  FFaplNodeList t4;
  FFaplNodeSequence t5;
  ASTExpr t6;
  int amount = 2;
      t1 = jj_consume_token(NEW);
t2 = new FFaplNodeToken(t1);
      t3 = ArrayType();
t4 = new FFaplNodeList();
      label_6:
      while (true) {
t5 = new FFaplNodeSequence();
        t1 = jj_consume_token(SQUARED_BRACE_LEFT);
t5.addNode(new FFaplNodeToken(t1));
        t6 = Expr();
t5.addNode(t6);
        t1 = jj_consume_token(SQUARED_BRACE_RIGHT);
t5.addNode(new FFaplNodeToken(t1));
      t4.addNode(t5);
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case SQUARED_BRACE_LEFT:{
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
      }
{if ("" != null) return new ASTCreationExpr (FFT_CREATIONEXPR, t2, t3, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("CreationExpr");
    }
}

  final public ASTExprComplexAType ExprComplexAType() throws ParseException, FFaplException {
    trace_call("ExprComplexAType");
    try {
FFaplNodeChoice t1;
  ASTGF t2;
  FFaplNodeSequence t6, t11;
  FFaplNodeType t8;
  FFaplNodeOpt t10;
  ASTExpr t7;
  Token t9;
  ASTEC t12;
  int amount = 3;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case GF:{
        t2 = GF();
t8.setType(new FFaplGaloisField());
       t8.addNode(t2);
       t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case EC:{
        t12 = EC();
t8.setType(new FFaplEllipticCurve());
       t8.addNode(t12);
       t1 = new FFaplNodeChoice(t8, 2, amount);
        break;
        }
      case RESIDUE:{
t6 = new FFaplNodeSequence();
        t9 = jj_consume_token(RESIDUE);
t6.addNode(new FFaplNodeToken(t9));
        t9 = jj_consume_token(BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t9));
        t7 = Expr();
t6.addNode(t7);
        t9 = jj_consume_token(BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t9));
        t8.setType(new FFaplResidueClass());
        t10 = new FFaplNodeOpt();
        if (jj_2_6(2)) {
t11 = new FFaplNodeSequence();
          t9 = jj_consume_token(SQUARED_BRACE_LEFT);
t11.addNode(new FFaplNodeToken(t9));
          t9 = jj_consume_token(IDENT);
t11.addNode(new FFaplNodeToken(t9));
          t9 = jj_consume_token(SQUARED_BRACE_RIGHT);
t11.addNode(new FFaplNodeToken(t9));
        t10.addNode(t11);
        t8.setType(new FFaplPolynomialResidue());
        } else {
          ;
        }
t6.addNode(t10);
        t8.addNode(t6);
        t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTExprComplexAType(FFT_EXPRCOMPLEXATYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ExprComplexAType");
    }
}

  final public ASTExprRandomGType ExprRandomGType() throws ParseException, FFaplException {
    trace_call("ExprRandomGType");
    try {
FFaplNodeChoice t1;
  ASTPsRandomGenerator t4;
  ASTRandomGenerator t5;
  FFaplNodeType t8;
  int amount = 2;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PSEUDORANDOMGENERATOR:{
        t4 = PsRandomGenerator();
t8.setType(new FFaplPsRandomGenerator());
       t8.addNode(t4);
       t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case RANDOMGENERATOR:{
        t5 = RandomGenerator();
t8.setType(new FFaplRandomGenerator());
       t8.addNode(t5);
       t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTExprRandomGType(FFT_EXPRRANDOMGTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ExprRandomGType");
    }
}

  final public ASTExpr Expr() throws ParseException, FFaplException {
    trace_call("Expr");
    try {
FFaplNodeChoice t1;
  FFaplNodeSequence t2, t3;
  FFaplNodeListOpt t4;
  ASTCondOrExpr t5, t6;
  ASTCreationExpr t7;
  Token t8;
  int amount = 2;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ECLEFT:
      case NOT:
      case PLUS:
      case MINUS:
      case HASH_KEY:
      case SQUARED_BRACE_LEFT:
      case CURLY_BRACE_LEFT:
      case BRACE_LEFT:
      case TRUE:
      case FALSE:
      case RANDOM:
      case IDENT:
      case NUMBER:
      case HEXNUMBER:
      case STRING:{
t2 = new FFaplNodeSequence();
        t5 = CondOrExpr();
t2.addNode(t5);
      t4 = new FFaplNodeListOpt();
        label_7:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case XOR:{
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_7;
          }
t3 = new FFaplNodeSequence();
          t8 = jj_consume_token(XOR);
t3.addNode(new FFaplNodeToken(t8));
          t6 = CondOrExpr();
t3.addNode(t6);
        t4.addNode(t3);
        }
t2.addNode(t4);
     t1 = new FFaplNodeChoice(t2, 0, amount);
        break;
        }
      case NEW:{
        //or
              t7 = CreationExpr();
t1 = new FFaplNodeChoice(t7, 1, amount);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTExpr(FFT_EXPR, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Expr");
    }
}

  final public ASTArgumentList ArgumentList() throws ParseException, FFaplException {
    trace_call("ArgumentList");
    try {
Token t1;
  ASTExpr t2, t3;
  FFaplNodeListOpt t4;
  FFaplNodeSequence t5;
      t2 = Expr();
t4 = new FFaplNodeListOpt();
      label_8:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_8;
        }
t5 = new FFaplNodeSequence();
        t1 = jj_consume_token(COMMA);
t5.addNode(new FFaplNodeToken(t1));
        t3 = Expr();
t5.addNode(t3);
      t4.addNode(t5);
      }
{if ("" != null) return new ASTArgumentList(FFT_ARGUMENTLIST, t2, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ArgumentList");
    }
}

  final public ASTProcFuncCall ProcFuncCall() throws ParseException, FFaplException {
    trace_call("ProcFuncCall");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4;
  FFaplNodeOpt t5;
  ASTArgumentList t6;
      t1 = jj_consume_token(IDENT);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t3 = new FFaplNodeToken(t1);
      t5 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ECLEFT:
      case NOT:
      case PLUS:
      case MINUS:
      case HASH_KEY:
      case SQUARED_BRACE_LEFT:
      case CURLY_BRACE_LEFT:
      case BRACE_LEFT:
      case NEW:
      case TRUE:
      case FALSE:
      case RANDOM:
      case IDENT:
      case NUMBER:
      case HEXNUMBER:
      case STRING:{
        t6 = ArgumentList();
t5.addNode(t6);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      t1 = jj_consume_token(BRACE_RIGHT);
t4 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTProcFuncCall(FFT_PROCFUNCCALL, t2, t3, t5, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ProcFuncCall");
    }
}

  final public ASTAssignment Assignment() throws ParseException, FFaplException {
    trace_call("Assignment");
    try {
Token t1;
  FFaplNodeToken t2, t3;
  FFaplNodeOpt t4;
  ASTSelector t5;
  ASTExpr t6;
      t1 = jj_consume_token(IDENT);
t2 = new FFaplNodeToken(t1);
     t4 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case SQUARED_BRACE_LEFT:
      case DOT:{
        t5 = Selector();
t4.addNode(t5);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      t1 = jj_consume_token(ASSIGN);
t3 = new FFaplNodeToken(t1);
      t6 = Expr();
{if ("" != null) return new ASTAssignment(FFT_ASSIGNMENT, t2, t4, t3, t6);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Assignment");
    }
}

  final public ASTECAssignment ECAssignment() throws ParseException, FFaplException {
    trace_call("ECAssignment");
    try {
Token t1;
  FFaplNodeToken t5, t6, t7;
      t1 = jj_consume_token(ECLEFT);
      t1 = jj_consume_token(IDENT);
t5 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(COMMA);
      t1 = jj_consume_token(IDENT);
t6 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(ECRIGHT);
      t1 = jj_consume_token(ASSIGN);
      t1 = jj_consume_token(IDENT);
t7 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTECAssignment(FFT_ECASSIGNMENT, t5, t6, t7);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ECAssignment");
    }
}

  final public ASTCondition Condition() throws ParseException, FFaplException {
    trace_call("Condition");
    try {
Token t1;
  FFaplNodeToken t2, t4;
  ASTExpr t3;
      t1 = jj_consume_token(BRACE_LEFT);
t2 = new FFaplNodeToken(t1);
      t3 = Expr();
      t1 = jj_consume_token(BRACE_RIGHT);
t4 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTCondition(FFT_CONDITION, t2, t3, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Condition");
    }
}

  final public ASTBlock Block() throws ParseException, FFaplException {
    trace_call("Block");
    try {
Token t1;
  FFaplNodeToken t2, t5;
  FFaplNodeListOpt t3;
  ASTStatementList t4;
  ASTDecl t6;
      t1 = jj_consume_token(CURLY_BRACE_LEFT);
t2 = new FFaplNodeToken(t1);
      t3 = new FFaplNodeListOpt();
      label_9:
      while (true) {
        if (jj_2_7(2)) {
        } else {
          break label_9;
        }
        t6 = Decl();
t3.addNode(t6);
      }
      t4 = StatementList();
      t1 = jj_consume_token(CURLY_BRACE_RIGHT);
t5 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTBlock(FFT_BLOCK, t2, t3, t4, t5);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Block");
    }
}

  final public ASTFuncBlock FuncBlock() throws ParseException, FFaplException {
    trace_call("FuncBlock");
    try {
Token t1;
  FFaplNodeToken t2, t6;
  FFaplNodeListOpt t3;
  ASTStatementList t4;
  ASTReturnStatement t5;
  ASTDecl t7;
      t1 = jj_consume_token(CURLY_BRACE_LEFT);
t2 = new FFaplNodeToken(t1);
     t3 = new FFaplNodeListOpt();
      label_10:
      while (true) {
        if (jj_2_8(2)) {
        } else {
          break label_10;
        }
        t7 = Decl();
t3.addNode(t7);
      }
      t4 = StatementList();
      t5 = ReturnStatement();
      t1 = jj_consume_token(CURLY_BRACE_RIGHT);
t6 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTFuncBlock(FFT_FUNCBLOCK, t2, t3, t4, t5, t6);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("FuncBlock");
    }
}

  final public ASTElseBlock ElseBlock() throws ParseException, FFaplException {
    trace_call("ElseBlock");
    try {
FFaplNodeChoice t1;
  ASTIfStatement t2;
  ASTBlock t3;
  int amount = 2;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IF:{
        t2 = IfStatement();
t1 = new FFaplNodeChoice(t2, 0, amount);
        break;
        }
      case CURLY_BRACE_LEFT:{
        t3 = Block();
t1 = new FFaplNodeChoice(t3, 1, amount);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTElseBlock(FFT_ELSEBLOCK, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ElseBlock");
    }
}

  final public ASTIfStatement IfStatement() throws ParseException, FFaplException {
    trace_call("IfStatement");
    try {
Token t1;
  FFaplNodeToken t2;
  ASTCondition t3;
  ASTBlock t4;
  FFaplNodeOpt t5;
  FFaplNodeSequence t6;
  ASTElseBlock t7;
      t1 = jj_consume_token(IF);
t2 = new FFaplNodeToken(t1);
      t3 = Condition();
      t4 = Block();
t5 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ELSE:{
t6 = new FFaplNodeSequence();
        t1 = jj_consume_token(ELSE);
t6.addNode(new FFaplNodeToken(t1));
        t7 = ElseBlock();
t6.addNode(t7);
      t5.addNode(t6);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
{if ("" != null) return new ASTIfStatement(FFT_IFSTATEMENT, t2, t3, t4, t5);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("IfStatement");
    }
}

  final public ASTWhileStatement WhileStatement() throws ParseException, FFaplException {
    trace_call("WhileStatement");
    try {
Token t1;
  FFaplNodeToken t2;
  ASTCondition t3;
  ASTBlock t4;
      t1 = jj_consume_token(WHILE);
t2 = new FFaplNodeToken(t1);
      t3 = Condition();
      t4 = Block();
{if ("" != null) return new ASTWhileStatement(FFT_WHILESTATEMENT, t2, t3, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("WhileStatement");
    }
}

  final public ASTForStatement ForStatement() throws ParseException, FFaplException {
    trace_call("ForStatement");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4, t6;
  ASTExpr t5, t7, t11;
  FFaplNodeOpt t8;
  ASTBlock t9;
  FFaplNodeSequence t10;
      t1 = jj_consume_token(FOR);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(EQUAL_SIGN);
t4 = new FFaplNodeToken(t1);
      t5 = Expr();
      t1 = jj_consume_token(TO);
t6 = new FFaplNodeToken(t1);
      t7 = Expr();
t8 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case STEP:{
t10 = new FFaplNodeSequence();
        t1 = jj_consume_token(STEP);
t10.addNode(new FFaplNodeToken(t1));
        t11 = Expr();
t10.addNode(t11);
     t8.addNode(t10);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      t9 = Block();
{if ("" != null) return new ASTForStatement(FFT_FORSTATEMENT, t2, t3, t4, t5, t6, t7, t8, t9);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ForStatement");
    }
}

  final public ASTReturnStatement ReturnStatement() throws ParseException, FFaplException {
    trace_call("ReturnStatement");
    try {
Token t1;
  FFaplNodeToken t2, t4;
  ASTExpr t3;
      t1 = jj_consume_token(RETURN);
t2 = new FFaplNodeToken(t1);
      t3 = Expr();
      t1 = jj_consume_token(SEMICOLON);
t4 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTReturnStatement(FFT_RETURNSTATEMENT, t2, t3, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ReturnStatement");
    }
}

  final public ASTBreak Break() throws ParseException, FFaplException {
    trace_call("Break");
    try {
Token t1;
  FFaplNodeToken t2;
      t1 = jj_consume_token(BREAK);
t2 = new FFaplNodeToken(t1);
    {if ("" != null) return new ASTBreak(FFT_BREAK, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Break");
    }
}

  final public ASTStatementList StatementList() throws ParseException, FFaplException {
    trace_call("StatementList");
    try {
FFaplNodeListOpt t1;
  FFaplNodeSequence t2;
  ASTStatement t3;
  Token t4;
  FFaplNodeChoice t5;
  ASTBlockStatement t6;
  int amount = 2;
t1 = new FFaplNodeListOpt();
      label_11:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case ECLEFT:
        case WHILE:
        case IF:
        case FOR:
        case BREAK:
        case IDENT:{
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_11;
        }
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case ECLEFT:
        case BREAK:
        case IDENT:{
t2 = new FFaplNodeSequence();
          t3 = Statement();
t2.addNode(t3);
          t4 = jj_consume_token(SEMICOLON);
t2.addNode(new FFaplNodeToken(t4));
        t5 = new FFaplNodeChoice(t2, 0, amount);
          break;
          }
        case WHILE:
        case IF:
        case FOR:{
          //or
             t6 = BlockStatement();
t5 = new FFaplNodeChoice(t6, 1, amount);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
t1.addNode(t5);
      }
{if ("" != null) return new ASTStatementList(FFT_STATEMENTLIST, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("StatementList");
    }
}

  final public ASTStatement Statement() throws ParseException, FFaplException {
    trace_call("Statement");
    try {
FFaplNodeChoice t1;
  ASTProcFuncCall t5;
  ASTAssignment t6;
  ASTBreak t7;
  ASTECAssignment t8;
  int amount = 4;
      if (jj_2_9(2)) {
        t5 = ProcFuncCall();
t1 = new FFaplNodeChoice(t5, 0, amount);
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case IDENT:{
          //or
              t6 = Assignment();
t1 = new FFaplNodeChoice(t6, 1, amount);
          break;
          }
        case BREAK:{
          //or
              t7 = Break();
t1 = new FFaplNodeChoice(t7, 2, amount);
          break;
          }
        case ECLEFT:{
          //or
              t8 = ECAssignment();
t1 = new FFaplNodeChoice(t8, 3, amount);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new ASTStatement(FFT_STATEMENT, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Statement");
    }
}

  final public ASTBlockStatement BlockStatement() throws ParseException, FFaplException {
    trace_call("BlockStatement");
    try {
FFaplNodeChoice t1;
  ASTIfStatement t2;
  ASTWhileStatement t3;
  ASTForStatement t4;
  int amount = 3;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IF:{
        t2 = IfStatement();
t1 = new FFaplNodeChoice(t2, 0, amount);
        break;
        }
      case WHILE:{
        //or
            t3 = WhileStatement();
t1 = new FFaplNodeChoice(t3, 1, amount);
        break;
        }
      case FOR:{
        //or
          t4 = ForStatement();
t1 = new FFaplNodeChoice(t4, 2, amount);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTBlockStatement(FFT_BLOCKSTATEMENT, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("BlockStatement");
    }
}

  final public ASTPrimitiveType PrimitiveType() throws ParseException, FFaplException {
    trace_call("PrimitiveType");
    try {
FFaplNodeChoice t1;
  Token t2;
  FFaplNodeOpt t3;
  FFaplNodeSequence t4, t5;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 3;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case INTEGER:{
        t2 = jj_consume_token(INTEGER);
t8.setType(new FFaplInteger());
         t8.addNode(new FFaplNodeToken(t2));
         t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case BOOLEAN:{
        //or
              t2 = jj_consume_token(BOOLEAN);
t8.setType(new FFaplBoolean());
         t8.addNode(new FFaplNodeToken(t2));
         t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      case TSTRING:{
        //or
              t2 = jj_consume_token(TSTRING);
t8.setType(new FFaplString());
         t8.addNode(new FFaplNodeToken(t2));
         t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTPrimitiveType(FFT_PRIMITIVETYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("PrimitiveType");
    }
}

  final public ASTAlgebraicType AlgebraicType() throws ParseException, FFaplException {
    trace_call("AlgebraicType");
    try {
FFaplNodeChoice t1;
  Token t2;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 2;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRIME:{
        t2 = jj_consume_token(PRIME);
t8.setType(new FFaplPrime());
         t8.addNode(new FFaplNodeToken(t2));
         t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case POLYNOMIAL:{
        //or
            t2 = jj_consume_token(POLYNOMIAL);
t8.setType(new FFaplPolynomial());
       t8.addNode(new FFaplNodeToken(t2));
       t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTAlgebraicType(FFT_ALGEBRAICTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("AlgebraicType");
    }
}

  final public ASTECBaseField ECBaseField() throws ParseException, FFaplException {
    trace_call("ECBaseField");
    try {
Token t1;
 FFaplNodeToken t2;
 FFaplNodeToken t3;
 FFaplNodeChoice t4;
 FFaplNodeType t5;

 int amount = 2;
t5 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ECBASEGF:{
        t1 = jj_consume_token(ECBASEGF);
t2 = new FFaplNodeToken(t1);
      t5.setType(new FFaplGaloisField());
   t4 = new FFaplNodeChoice(t5, 0, amount);
        break;
        }
      case ECBASEZ:{
        t1 = jj_consume_token(ECBASEZ);
t2 = new FFaplNodeToken(t1);
      t5.setType(new FFaplResidueClass());
   t4 = new FFaplNodeChoice(t5, 1, amount);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t1 = jj_consume_token(BRACE_LEFT);

      t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_RIGHT);

{if ("" != null) return new ASTECBaseField(FFT_ECBASEFIELD,t2,t3,t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ECBaseField");
    }
}

  final public ASTSameAs SameAs() throws ParseException, FFaplException {
    trace_call("SameAs");
    try {
Token t1;
 FFaplNodeToken t2;
      t1 = jj_consume_token(SAMEAS);

      t1 = jj_consume_token(BRACE_LEFT);

      t1 = jj_consume_token(IDENT);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_RIGHT);

{if ("" != null) return new ASTSameAs(FFT_SAMEAS,t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("SameAs");
    }
}

  final public ASTContainerType ContainerType() throws ParseException, FFaplException {
    trace_call("ContainerType");
    try {
FFaplNodeChoice t1;
  ASTRecord t2;
  //ASTExpr t7;
  FFaplNodeType t8;

  int amount = 1;
t8 = new FFaplNodeType();
      t2 = Record();
t8.setType(new FFaplRecord());
       t8.addNode(t2);
       t1 = new FFaplNodeChoice(t8, 0, amount);
{if ("" != null) return new ASTContainerType(FFT_CONTAINERTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ContainerType");
    }
}

  final public ASTComplexAlgebraicType ComplexAlgebraicType() throws ParseException, FFaplException {
    trace_call("ComplexAlgebraicType");
    try {
FFaplNodeChoice t1;
  ASTRecord t3;
  Token t5;
  FFaplNodeSequence t6, t7;
  FFaplNodeType t8;
  FFaplNodeOpt t9;
  int amount = 3;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case GF:{
        t5 = jj_consume_token(GF);
t8.setType(new FFaplGaloisField());
       t8.addNode(new FFaplNodeToken(t5));
       t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case EC:{
        t5 = jj_consume_token(EC);
t8.setType(new FFaplEllipticCurve());
       t8.addNode(new FFaplNodeToken(t5));
       t1 = new FFaplNodeChoice(t8, 2, amount);
        break;
        }
      case RESIDUE:{
t6 = new FFaplNodeSequence();
        t5 = jj_consume_token(RESIDUE);
t6.addNode(new FFaplNodeToken(t5));
        t5 = jj_consume_token(BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t5));
        t5 = jj_consume_token(BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t5));
        t9 = new FFaplNodeOpt();
        t8.setType(new FFaplResidueClass());
        if (jj_2_10(2)) {
t7 = new FFaplNodeSequence();
          t5 = jj_consume_token(SQUARED_BRACE_LEFT);
t7.addNode(new FFaplNodeToken(t5));
          t5 = jj_consume_token(IDENT);
t7.addNode(new FFaplNodeToken(t5));
          t5 = jj_consume_token(SQUARED_BRACE_RIGHT);
t7.addNode(new FFaplNodeToken(t5));
        t9.addNode(t7);
        t8.setType(new FFaplPolynomialResidue());
        } else {
          ;
        }
t6.addNode(t9);
        t8.addNode(t6);
        t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTComplexAlgebraicType(FFT_COMPLEXALGEBRAICTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ComplexAlgebraicType");
    }
}

  final public ASTRandomGeneratorType RandomGeneratorType() throws ParseException, FFaplException {
    trace_call("RandomGeneratorType");
    try {
FFaplNodeChoice t1;
  ASTRecord t3;
  Token t5;
  FFaplNodeSequence t6, t7;
  FFaplNodeType t8;
  FFaplNodeOpt t9;
  int amount = 2;
t8 = new FFaplNodeType();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PSEUDORANDOMGENERATOR:{
        t5 = jj_consume_token(PSEUDORANDOMGENERATOR);
t8.setType(new FFaplPsRandomGenerator());
       t8.addNode(new FFaplNodeToken(t5));
       t1 = new FFaplNodeChoice(t8, 0, amount);
        break;
        }
      case RANDOMGENERATOR:{
        t5 = jj_consume_token(RANDOMGENERATOR);
t8.setType(new FFaplRandomGenerator());
       t8.addNode(new FFaplNodeToken(t5));
       t1 = new FFaplNodeChoice(t8, 1, amount);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTRandomGeneratorType(FFT_RANDOMGENERATORTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("RandomGeneratorType");
    }
}

  final public ASTConstType ConstType() throws ParseException, FFaplException {
    trace_call("ConstType");
    try {
FFaplNodeChoice t3;
  ASTPrimitiveType t4;
  ASTExprComplexAType t5;
  ASTAlgebraicType t6;
  int amount = 2;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case RESIDUE:
      case EC:
      case GF:{
        t5 = ExprComplexAType();
t3 = new FFaplNodeChoice(t5, 0, amount);
        break;
        }
      case INTEGER:
      case BOOLEAN:
      case TSTRING:{
        t4 = PrimitiveType();
t3 = new FFaplNodeChoice(t4, 1, amount);
        break;
        }
      case PRIME:
      case POLYNOMIAL:{
        t6 = AlgebraicType();
t3 = new FFaplNodeChoice(t6, 2, amount);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTConstType (FFT_CONSTTYPE, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ConstType");
    }
}

  final public ASTArrayType ArrayType() throws ParseException, FFaplException {
    trace_call("ArrayType");
    try {
FFaplNodeChoice t3;
  ASTPrimitiveType t4;
  ASTAlgebraicType t6;
  ASTComplexAlgebraicType t7;
  int amount = 3;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case TSTRING:{
        t4 = PrimitiveType();
t3 = new FFaplNodeChoice(t4, 0, amount);
        break;
        }
      case PRIME:
      case POLYNOMIAL:{
        t6 = AlgebraicType();
t3 = new FFaplNodeChoice(t6, 1, amount);
        break;
        }
      case RESIDUE:
      case EC:
      case GF:{
        t7 = ComplexAlgebraicType();
t3 = new FFaplNodeChoice(t7, 2, amount);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTArrayType (FFT_ARRAYTYPE, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ArrayType");
    }
}

  final public ASTDeclType DeclType() throws ParseException, FFaplException {
    trace_call("DeclType");
    try {
Token t0;
  FFaplNodeChoice t1;
  ASTPrimitiveType t2;
  FFaplNodeSequence t4, t6;
  FFaplNodeListOpt t5;
  ASTContainerType t7;
  ASTAlgebraicType t8;
  ASTExprComplexAType t9;
  ASTExprRandomGType t10;
  ASTSameAs t11;
  ASTECBaseField t12;
  int amount = 7;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case RANDOMGENERATOR:
      case PSEUDORANDOMGENERATOR:{
        t10 = ExprRandomGType();
t1 = new FFaplNodeChoice(t10, 0, amount);
        break;
        }
      case RESIDUE:
      case EC:
      case GF:{
t4 = new FFaplNodeSequence();
        t9 = ExprComplexAType();
t4.addNode(t9);
       t5 = new FFaplNodeListOpt();
        label_12:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            break label_12;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 1, amount);
        break;
        }
      case INTEGER:
      case BOOLEAN:
      case TSTRING:{
t4 = new FFaplNodeSequence();
        t2 = PrimitiveType();
t4.addNode(t2);
       t5 = new FFaplNodeListOpt();
        label_13:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            break label_13;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 2, amount);
        break;
        }
      case PRIME:
      case POLYNOMIAL:{
t4 = new FFaplNodeSequence();
        t8 = AlgebraicType();
t4.addNode(t8);
       t5 = new FFaplNodeListOpt();
        label_14:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[47] = jj_gen;
            break label_14;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 3, amount);
        break;
        }
      case RECORD:{
        //or
        
          t7 = ContainerType();
t1 = new FFaplNodeChoice(t7, 4, amount);
        break;
        }
      case SAMEAS:{
        //or
          t11 = SameAs();
t1 = new FFaplNodeChoice(t11,5,amount);
        break;
        }
      case ECBASEGF:
      case ECBASEZ:{
        //or
          t12 = ECBaseField();
t1 = new FFaplNodeChoice(t12,6,amount);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTDeclType(FFT_DECLTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("DeclType");
    }
}

  final public ASTParamType ParamType() throws ParseException, FFaplException {
    trace_call("ParamType");
    try {
Token t0;
  FFaplNodeChoice t1;
  ASTPrimitiveType t2;
  FFaplNodeSequence t4, t6;
  FFaplNodeListOpt t5;
  ASTAlgebraicType t8;
  ASTComplexAlgebraicType t9;
  ASTRandomGeneratorType t10;
  int amount = 4;
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case RANDOMGENERATOR:
      case PSEUDORANDOMGENERATOR:{
        t10 = RandomGeneratorType();
t1 = new FFaplNodeChoice(t10, 0, amount);
        break;
        }
      case RESIDUE:
      case EC:
      case GF:{
t4 = new FFaplNodeSequence();
        t9 = ComplexAlgebraicType();
t4.addNode(t9);
       t5 = new FFaplNodeListOpt();
        label_15:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            break label_15;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 1, amount);
        break;
        }
      case INTEGER:
      case BOOLEAN:
      case TSTRING:{
t4 = new FFaplNodeSequence();
        t2 = PrimitiveType();
t4.addNode(t2);
       t5 = new FFaplNodeListOpt();
        label_16:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            break label_16;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 2, amount);
        break;
        }
      case PRIME:
      case POLYNOMIAL:{
t4 = new FFaplNodeSequence();
        t8 = AlgebraicType();
t4.addNode(t8);
       t5 = new FFaplNodeListOpt();
        label_17:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case SQUARED_BRACE_LEFT:{
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_17;
          }
t6 = new FFaplNodeSequence();
          t0 = jj_consume_token(SQUARED_BRACE_LEFT);
t6.addNode(new FFaplNodeToken(t0));
          t0 = jj_consume_token(SQUARED_BRACE_RIGHT);
t6.addNode(new FFaplNodeToken(t0));
      t5.addNode(t6);
        }
t4.addNode(t5);
      t1 = new FFaplNodeChoice(t4, 3, amount);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new ASTParamType(FFT_PARAMTYPE, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ParamType");
    }
}

  final public ASTDecl Decl() throws ParseException, FFaplException {
    trace_call("Decl");
    try {
Token t1;
  FFaplNodeToken t3, t5, t7;
  FFaplNodeListOpt t4;
  ASTDeclType t6;
  FFaplNodeSequence t8;
      //t1 = < DECLARE >
       //  {
       //    t2 = null;// new FFaplNodeToken(t1);
       //  }
        t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
     t4 = new FFaplNodeListOpt();
      label_18:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_18;
        }
t8 = new FFaplNodeSequence();
        t1 = jj_consume_token(COMMA);
t8.addNode(new FFaplNodeToken(t1));
        t1 = jj_consume_token(IDENT);
t8.addNode(new FFaplNodeToken(t1));
       t4.addNode(t8);
      }
      t1 = jj_consume_token(COLON);
t5 = new FFaplNodeToken(t1);
      t6 = DeclType();
      t1 = jj_consume_token(SEMICOLON);
t7 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTDecl(FFT_DECL, t3, t4, t5, t6, t7);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Decl");
    }
}

  final public ASTConstDecl ConstDecl() throws ParseException, FFaplException {
    trace_call("ConstDecl");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4, t6, t8;
  ASTExpr t7;
  ASTConstType t5;
      t1 = jj_consume_token(CONST);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(COLON);
t4 = new FFaplNodeToken(t1);
      t5 = ConstType();
      t1 = jj_consume_token(ASSIGN);
t6 = new FFaplNodeToken(t1);
      t7 = Expr();
      t1 = jj_consume_token(SEMICOLON);
t8 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTConstDecl(FFT_CONSTDECL, t2, t3, t4, t5, t6, t7, t8);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ConstDecl");
    }
}

  final public ASTIdTerm IdTerm() throws ParseException, FFaplException {
    trace_call("IdTerm");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeOpt t3;
  FFaplNodeSequence t4;
  ASTPrimaryExpr t5;
      t1 = jj_consume_token(IDENT);
t2 = new FFaplNodeToken(t1);
        t3 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case POWER:{
t4 = new FFaplNodeSequence();
        t1 = jj_consume_token(POWER);
t4.addNode(new FFaplNodeToken(t1));
        t5 = PrimaryExpr();
t4.addNode(t5);
         t3.addNode(t4);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
{if ("" != null) return new ASTIdTerm(FFT_IDTERM, t2, t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("IdTerm");
    }
}

  final public ASTTerm Term() throws ParseException, FFaplException {
    trace_call("Term");
    try {
FFaplNodeChoice t1;
  ASTPowExpr t2;
  ASTIdTerm t3;
  FFaplNodeSequence t4;
  FFaplNodeOpt t5;
  Token t6;
  int amount = 2;
      if (jj_2_11(2)) {
t4 = new FFaplNodeSequence();
        t5 = new FFaplNodeOpt();
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case MINUS:{
          t6 = jj_consume_token(MINUS);
t5.addNode(new FFaplNodeToken(t6));
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          ;
        }
t4.addNode(t5);
        t3 = IdTerm();
t4.addNode(t3);
        t1 = new FFaplNodeChoice(t4, 1, amount);
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case ECLEFT:
        case NOT:
        case PLUS:
        case MINUS:
        case HASH_KEY:
        case SQUARED_BRACE_LEFT:
        case CURLY_BRACE_LEFT:
        case BRACE_LEFT:
        case TRUE:
        case FALSE:
        case RANDOM:
        case IDENT:
        case NUMBER:
        case HEXNUMBER:
        case STRING:{
t4 = new FFaplNodeSequence();
          t2 = PowExpr();
t4.addNode(t2);
         t5 = new FFaplNodeOpt();
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case IDENT:{
            t3 = IdTerm();
t5.addNode(t3);
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            ;
          }
t4.addNode(t5);
         t1 = new FFaplNodeChoice(t4, 0, amount);
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new ASTTerm(FFT_TERM, t1);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Term");
    }
}

  final public ASTECPoint ECPoint() throws ParseException, FFaplException {
    trace_call("ECPoint");
    try {
Token t1;
  FFaplNodeToken t2, t4, t6;
  ASTExpr t3, t5;
      t1 = jj_consume_token(ECLEFT);
t2 = new FFaplNodeToken(t1);
      t3 = Expr();
      t1 = jj_consume_token(COMMA);
t4 = new FFaplNodeToken(t1);
      t5 = Expr();
      t1 = jj_consume_token(ECRIGHT);
t6 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTECPoint(FFT_ECPOINT, t2, t3, t4, t5, t6);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ECPoint");
    }
}

  final public ASTECPAI ECPAI() throws ParseException, FFaplException {
    trace_call("ECPAI");
    try {
Token t1;
  FFaplNodeToken t2, t3;
      t1 = jj_consume_token(ECLEFT);
      t1 = jj_consume_token(ECPAI);
      t1 = jj_consume_token(ECRIGHT);
{if ("" != null) return new ASTECPAI(FFT_ECPOINT);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ECPAI");
    }
}

  final public ASTECRandom ECRandom() throws ParseException, FFaplException {
    trace_call("ECRandom");
    try {
Token t1;
  FFaplNodeToken t2;
  FFaplNodeChoice t3;
  int amount = 2;
      t1 = jj_consume_token(ECLEFT);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ECRANDOM:{
        t1 = jj_consume_token(ECRANDOM);
t2 = new FFaplNodeToken(t1);
   t3 = new FFaplNodeChoice(t2, 0, amount);
        break;
        }
      case ECRANDOMSUB:{
        t1 = jj_consume_token(ECRANDOMSUB);
t2 = new FFaplNodeToken(t1);
      t3 = new FFaplNodeChoice(t2, 1, amount);
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t1 = jj_consume_token(ECRIGHT);
{if ("" != null) return new ASTECRandom(FFT_ECPOINT,t3);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("ECRandom");
    }
}

  final public ASTPolynomial Polynomial() throws ParseException, FFaplException {
    trace_call("Polynomial");
    try {
Token t1;
  FFaplNodeToken t2, t5;
  ASTTerm t3, t7;
  FFaplNodeListOpt t4;
  ASTAddOp t6;
  FFaplNodeSequence t8;
      t1 = jj_consume_token(SQUARED_BRACE_LEFT);
t2 = new FFaplNodeToken(t1);
      t3 = Term();
t4 = new FFaplNodeListOpt();
      label_19:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case PLUS:
        case MINUS:{
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_19;
        }
t8 = new FFaplNodeSequence();
        t6 = AddOp();
t8.addNode(t6);
        t7 = Term();
t8.addNode(t7);
       t4.addNode(t8);
      }
      t1 = jj_consume_token(SQUARED_BRACE_RIGHT);
t5 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTPolynomial(FFT_POLYNOMIAL, t2, t3, t4, t5);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Polynomial");
    }
}

  final public ASTGF GF() throws ParseException, FFaplException {
    trace_call("GF");
    try {
Token t1;
  FFaplNodeToken t2, t3, t5, t7;
  ASTExpr t4, t6;
      t1 = jj_consume_token(GF);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t3 = new FFaplNodeToken(t1);
      t4 = Expr();
      t1 = jj_consume_token(COMMA);
t5 = new FFaplNodeToken(t1);
      t6 = Expr();
      t1 = jj_consume_token(BRACE_RIGHT);
t7 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTGF(FFT_GF, t2, t3, t4, t5, t6, t7);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("GF");
    }
}

  final public ASTEC EC() throws ParseException, FFaplException {
    trace_call("EC");
    try {
Token t1;
  FFaplNodeToken t2, t3, t7;
  ASTGF t4;
  FFaplNodeListOpt t5;
  FFaplNodeSequence t6;

  ASTExpr t8;
  ASTExpr t9;
  boolean isGF;
      t1 = jj_consume_token(EC);
t2 = new FFaplNodeToken(t1);
     t5 = new FFaplNodeListOpt();
      t1 = jj_consume_token(BRACE_LEFT);
t3 = new FFaplNodeToken(t1);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case GF:{
        t4 = GF();
isGF = true;
    t9  = null;
        break;
        }
      case RESIDUE:{
        t1 = jj_consume_token(RESIDUE);
isGF = false;
         t4 = null;
        t1 = jj_consume_token(BRACE_LEFT);
        t9 = Expr();
        t1 = jj_consume_token(BRACE_RIGHT);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_20:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          break label_20;
        }
t6 = new FFaplNodeSequence();
        t1 = jj_consume_token(COMMA);
t6.addNode(new FFaplNodeToken(t1));
        t1 = jj_consume_token(IDENT);
t6.addNode(new FFaplNodeToken(t1));
        t1 = jj_consume_token(ASSIGN);
t6.addNode(new FFaplNodeToken(t1));
        t8 = Expr();
t6.addNode(t8);
   t5.addNode(t6);
      }
      t1 = jj_consume_token(BRACE_RIGHT);
t7 = new FFaplNodeToken(t1);
if (isGF == true)
   {
     {if ("" != null) return new ASTEC(FFT_EC, t2, t3, t4, t5, t7);}
 }
 else
 {
  {if ("" != null) return new ASTEC(FFT_EC, t2, t3, t9, t5, t7);}
 }
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("EC");
    }
}

  final public ASTRecord Record() throws ParseException, FFaplException {
    trace_call("Record");
    try {
Token t1;
  FFaplNodeToken t2, t4;
  FFaplNodeListOpt t3;
  ASTDecl t5;
      t1 = jj_consume_token(RECORD);
t2 = new FFaplNodeToken(t1);
     t3 = new FFaplNodeListOpt();
      label_21:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case IDENT:{
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          break label_21;
        }
        //Optional List
             t5 = Decl();
t3.addNode(t5);
      }
      t1 = jj_consume_token(RECORD_END);
t4 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTRecord(FFT_RECORD, t2, t3, t4);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Record");
    }
}

  final public ASTPsRandomGenerator PsRandomGenerator() throws ParseException, FFaplException {
    trace_call("PsRandomGenerator");
    try {
Token t1;
  FFaplNodeToken t2, t3, t5, t7;
  ASTExpr t4, t6;
      t1 = jj_consume_token(PSEUDORANDOMGENERATOR);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t3 = new FFaplNodeToken(t1);
      t4 = Expr();
      t1 = jj_consume_token(COMMA);
t5 = new FFaplNodeToken(t1);
      t6 = Expr();
      t1 = jj_consume_token(BRACE_RIGHT);
t7 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTPsRandomGenerator(FFT_PSRANDOMGENERATOR, t2, t3, t4, t5, t6, t7);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("PsRandomGenerator");
    }
}

  final public ASTFormalParam FormalParam() throws ParseException, FFaplException {
    trace_call("FormalParam");
    try {
Token t1;
  FFaplNodeToken t2, t4;
  FFaplNodeListOpt t3;
  ASTParamType t5;
  FFaplNodeSequence t6;
      t1 = jj_consume_token(IDENT);
t2 = new FFaplNodeToken(t1);
     t3 = new FFaplNodeListOpt();
      label_22:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          break label_22;
        }
t6 = new FFaplNodeSequence();
        t1 = jj_consume_token(COMMA);
t6.addNode(new FFaplNodeToken(t1));
        t1 = jj_consume_token(IDENT);
t6.addNode(new FFaplNodeToken(t1));
      t3.addNode(t6);
      }
      t1 = jj_consume_token(COLON);
t4 = new FFaplNodeToken(t1);
      t5 = ParamType();
{if ("" != null) return new ASTFormalParam(FFT_FORMALPARAM, t2, t3, t4, t5);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("FormalParam");
    }
}

  final public ASTFormalParamList FormalParamList() throws ParseException, FFaplException {
    trace_call("FormalParamList");
    try {
ASTFormalParam t1, t5;
  FFaplNodeListOpt t2;
  FFaplNodeSequence t3;
  Token t4;
      t1 = FormalParam();
t2 = new FFaplNodeListOpt();
      label_23:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case SEMICOLON:{
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          break label_23;
        }
t3 = new FFaplNodeSequence();
        t4 = jj_consume_token(SEMICOLON);
t3.addNode(new FFaplNodeToken(t4));
        t5 = FormalParam();
t3.addNode(t5);
       t2.addNode(t3);
      }
{if ("" != null) return new ASTFormalParamList(FFT_FORMALPARAMLIST, t1, t2);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("FormalParamList");
    }
}

  final public ASTProgram Program() throws ParseException, FFaplException {
    trace_call("Program");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4, t8, t9;
  FFaplNodeListOpt t5, t6, t14;
  ASTStatementList t7;
  FFaplNodeChoice t10;
  ASTProc t11;
  ASTFunc t12;
  ASTDecl t13;
  ASTConstDecl t15;
  int amount = 2;
      t1 = jj_consume_token(PROGRAM);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
_programName = t1.image;
     t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(CURLY_BRACE_LEFT);
t4 = new FFaplNodeToken(t1);
     t14 = new FFaplNodeListOpt();
      label_24:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case CONST:{
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          break label_24;
        }
        //Optional List
             t15 = ConstDecl();
t14.addNode(t15);
      }
t5 = new FFaplNodeListOpt();
      label_25:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case PROCEDURE:
        case FUNCTION:{
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          break label_25;
        }
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case PROCEDURE:{
          t11 = Proc();
t10 = new FFaplNodeChoice(t11, 0, amount);
          break;
          }
        case FUNCTION:{
          t12 = Func();
t10 = new FFaplNodeChoice(t12, 1, amount);
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
t5.addNode(t10);
      }
t6 = new FFaplNodeListOpt();
      label_26:
      while (true) {
        if (jj_2_12(2)) {
        } else {
          break label_26;
        }
        t13 = Decl();
t6.addNode(t13);
      }
      t7 = StatementList();
      t1 = jj_consume_token(CURLY_BRACE_RIGHT);
t8 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(0);
t9 = new FFaplNodeToken(t1);
{if ("" != null) return new ASTProgram(FFT_PROGRAM, t2, t3, t4, t14, t5, t6, t7, t8, t9);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Program");
    }
}

  final public ASTProc Proc() throws ParseException, FFaplException {
    trace_call("Proc");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4, t6;
  FFaplNodeOpt t5;
  ASTBlock t7;
  ASTFormalParamList t8;
      t1 = jj_consume_token(PROCEDURE);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t4 = new FFaplNodeToken(t1);
     t5 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IDENT:{
        t8 = FormalParamList();
t5.addNode(t8);
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      t1 = jj_consume_token(BRACE_RIGHT);
t6 = new FFaplNodeToken(t1);
      t7 = Block();
{if ("" != null) return new ASTProc(FFT_PROC, t2, t3, t4, t5, t6, t7);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Proc");
    }
}

  final public ASTFunc Func() throws ParseException, FFaplException {
    trace_call("Func");
    try {
Token t1;
  FFaplNodeToken t2, t3, t4, t6, t7;
  FFaplNodeOpt t5;
  ASTParamType t8;
  ASTFuncBlock t9;
  ASTFormalParamList t10;
      t1 = jj_consume_token(FUNCTION);
t2 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(IDENT);
t3 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(BRACE_LEFT);
t4 = new FFaplNodeToken(t1);
     t5 = new FFaplNodeOpt();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IDENT:{
        t10 = FormalParamList();
t5.addNode(t10);
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      t1 = jj_consume_token(BRACE_RIGHT);
t6 = new FFaplNodeToken(t1);
      t1 = jj_consume_token(COLON);
t7 = new FFaplNodeToken(t1);
      t8 = ParamType();
      t9 = FuncBlock();
{if ("" != null) return new ASTFunc(FFT_FUNC, t2, t3, t4, t5, t6, t7, t8, t9);}
    throw new IllegalStateException ("Missing return statement in function");
    } finally {
      trace_return("Func");
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(ECRANDOMSUB)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (!jj_rescan) trace_call("PowExpr(LOOKING AHEAD...)");
    if (jj_3R_46()) { if (!jj_rescan) trace_return("PowExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PowExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_59()
 {
    if (!jj_rescan) trace_call("EqualExpr(LOOKING AHEAD...)");
    if (jj_3R_62()) { if (!jj_rescan) trace_return("EqualExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("EqualExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (!jj_rescan) trace_call("PrimaryExpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) { if (!jj_rescan) trace_return("PrimaryExpr(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("PrimaryExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(BRACE_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (!jj_rescan) trace_call("Expr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) { if (!jj_rescan) trace_return("Expr(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Expr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (!jj_rescan) trace_call("Decl(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("Decl(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) { if (!jj_rescan) trace_return("Decl(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Decl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(SQUARED_BRACE_LEFT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (!jj_rescan) trace_call("AddOp(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) { if (!jj_rescan) trace_return("AddOp(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("AddOp(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_4()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (!jj_rescan) trace_call("Polynomial(LOOKING AHEAD...)");
    if (jj_scan_token(SQUARED_BRACE_LEFT)) { if (!jj_rescan) trace_return("Polynomial(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Polynomial(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_32()
 {
    if (!jj_rescan) trace_call("MulExpr(LOOKING AHEAD...)");
    if (jj_3R_41()) { if (!jj_rescan) trace_return("MulExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("MulExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (!jj_rescan) trace_call("CondOrExpr(LOOKING AHEAD...)");
    if (jj_3R_51()) { if (!jj_rescan) trace_return("CondOrExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CondOrExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(CURLY_BRACE_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (!jj_rescan) trace_call("Literal(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) { if (!jj_rescan) trace_return("Literal(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Literal(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_70()
 {
    if (!jj_rescan) trace_call("AddExpr(LOOKING AHEAD...)");
    if (jj_3R_32()) { if (!jj_rescan) trace_return("AddExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("AddExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(SQUARED_BRACE_LEFT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (!jj_rescan) trace_call("CondAndExpr(LOOKING AHEAD...)");
    if (jj_3R_59()) { if (!jj_rescan) trace_return("CondAndExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CondAndExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_27()
 {
    if (!jj_rescan) trace_call("ECPoint(LOOKING AHEAD...)");
    if (jj_scan_token(ECLEFT)) { if (!jj_rescan) trace_return("ECPoint(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_36()) { if (!jj_rescan) trace_return("ECPoint(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ECPoint(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (!jj_rescan) trace_call("Random(LOOKING AHEAD...)");
    if (jj_scan_token(RANDOM)) { if (!jj_rescan) trace_return("Random(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Random(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (!jj_rescan) trace_call("ProcFuncCall(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("ProcFuncCall(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(BRACE_LEFT)) { if (!jj_rescan) trace_return("ProcFuncCall(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ProcFuncCall(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_46()
 {
    if (!jj_rescan) trace_call("UnaryExpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_3R_50()) { if (!jj_rescan) trace_return("UnaryExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("UnaryExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_61()
 {
    if (!jj_rescan) trace_call("ArrayLen(LOOKING AHEAD...)");
    if (jj_scan_token(HASH_KEY)) { if (!jj_rescan) trace_return("ArrayLen(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ArrayLen(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(HEXNUMBER)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (!jj_rescan) trace_call("RelExpr(LOOKING AHEAD...)");
    if (jj_3R_70()) { if (!jj_rescan) trace_return("RelExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("RelExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (!jj_rescan) trace_call("ECPAI(LOOKING AHEAD...)");
    if (jj_scan_token(ECLEFT)) { if (!jj_rescan) trace_return("ECPAI(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ECPAI)) { if (!jj_rescan) trace_return("ECPAI(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ECPAI(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (!jj_rescan) trace_call("CreationExpr(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("CreationExpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CreationExpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_35()
 {
    if (!jj_rescan) trace_call("IdTerm(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("IdTerm(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("IdTerm(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (!jj_rescan) trace_call("ECRandom(LOOKING AHEAD...)");
    if (jj_scan_token(ECLEFT)) { if (!jj_rescan) trace_return("ECRandom(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) { if (!jj_rescan) trace_return("ECRandom(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("ECRandom(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_2()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(ECRANDOM)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FFaplInterpreterTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[70];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x300c0,0xc0000,0x600000,0x3800000,0x0,0x80000000,0x0,0x8000000,0x8000000,0x8000000,0x8000000,0x8000000,0x8000000,0x88000100,0x24000000,0x700000,0x700000,0x0,0x3800000,0x300c0,0xc0000,0x0,0x0,0x8000000,0x0,0x0,0x0,0xac700100,0x0,0xac700100,0x8000000,0x20000000,0x0,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0xc000,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0xe000,0x8000000,0x8000000,0x8000000,0x0,0x0,0x0,0x400000,0x0,0xac700100,0x1800,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x20,0x0,0x20,0xb00000,0x2,0x2,0x2,0x2,0x2,0xb00000,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x100,0x80,0x0,0x18000400,0x81000000,0x200,0xb20000,0x10,0xb20000,0x2,0x40000,0x400000,0x4000000,0xd0000,0xd0000,0x0,0xd0000,0x9800,0x6000,0x0,0x18000400,0x81000000,0x1800fc00,0x1800fc00,0x0,0x0,0x0,0xb900fc00,0x0,0x0,0x0,0x9900fc00,0x10,0x40,0x0,0x0,0xb00000,0x0,0x0,0x10000400,0x10,0x0,0x10,0x8,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000,0x0,0x0,0x0,0x0,0x0,0xe000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf000,0x0,0xf000,0x0,0x0,0x0,0x0,0x1020,0x1020,0x1020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0xf000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x10,0x6,0x6,0x1000,0x1000,};
	}
  private final JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /**
   * Constructor with InputStream.
   * @param stream input stream
   */
  public FFaplInterpreter(final java.io.InputStream stream) {
	  this(stream, null);
  }

  /**
   * Constructor with InputStream and supplied encoding
   * @param stream input stream
   * @param encoding charset to be used
   */
  public FFaplInterpreter(final java.io.InputStream stream, final java.nio.charset.Charset encoding) {
   jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
	 token_source = new FFaplInterpreterTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 70; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param stream input stream
   */
  public void ReInit(final java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /**
   * Reinitialise
   * @param stream input stream
   * @param encoding charset to be used
   */
  public void ReInit(final java.io.InputStream stream, final java.nio.charset.Charset encoding) {
    jj_input_stream.reInit(stream, encoding, 1, 1);
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 70; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public FFaplInterpreter(final java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new FFaplInterpreterTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 70; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final java.io.Reader stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new FFaplInterpreterTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 70; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public FFaplInterpreter(final FFaplInterpreterTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 70; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final FFaplInterpreterTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 70; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  private static final class LookaheadSuccess extends IllegalStateException { }
  private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		   jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		   jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 } else {
	   trace_scan(jj_scanpos, kind);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
  if (pos >= 100) {
    return;
  }

  if (pos == jj_endpos + 1) {
    jj_lasttokens[jj_endpos++] = kind;
  } else if (jj_endpos != 0) {
    jj_expentry = new int[jj_endpos];

    for (int i = 0; i < jj_endpos; i++) {
      jj_expentry[i] = jj_lasttokens[i];
    }

    for (final int[] oldentry : jj_expentries) {
      if (oldentry.length == jj_expentry.length) {
        boolean isMatched = true;
        for (int i = 0; i < jj_expentry.length; i++) {
          if (oldentry[i] != jj_expentry[i]) {
            isMatched = false;
            break;
          }
        }
        if (isMatched) {
          jj_expentries.add(jj_expentry);
          break;
        }
      }
    }

    if (pos != 0) {
      jj_endpos = pos;
      jj_lasttokens[jj_endpos - 1] = kind;
    }
  }
}

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 70; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  /**
   * @return Trace enabled or not?
   */
  public final boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  public final void enable_tracing() {
    trace_enabled = true;
  }

  /** Disable tracing. */
  public final void disable_tracing() {
    trace_enabled = false;
  }

  protected java.io.PrintStream tracePS = System.out;

  protected void trace_call(final String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) {
        tracePS.print(" ");
      }
      tracePS.println("Call:	" + s);
    }
    trace_indent += 2;
  }

  protected void trace_return(String s) {
    trace_indent -= 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { tracePS.print(" "); }
      tracePS.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) {
        tracePS.print(" ");
      }
      tracePS.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        tracePS.print(": \"" + TokenMgrException.addEscapes(t.image) + "\"");
      }
      tracePS.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  protected void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { tracePS.print(" "); }
      tracePS.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        tracePS.print(": \"" + TokenMgrException.addEscapes(t1.image) + "\"");
      }
      tracePS.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_scanpos = p.first;
            jj_lastpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch(LookaheadSuccess ls) { /* ignore */ }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p.next = new JJCalls();
        p = p.next;
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
