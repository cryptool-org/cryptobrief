language = English
version = 1.0
acronym = en

#		<!-- Title File -->
new_file = New
		
#		<!-- Title for Menu -->
menu_file = File
menu_edit = Edit
menu_search = Search
menu_run = Run
menu_help = Help
menu_extras = Extras
menu_view = View

		
#		<!-- Title for Menu Items -->
menuitem_new = New
menuitem_openfile = Open file...
menuitem_exit = Exit
menuitem_save = Save
menuitem_undo = Undo
menuitem_redo = Redo
menuitem_saveas = Save as...
menuitem_saveall = Save all
menuitem_about = About Sunset
menuitem_preferences = Preferences
menuitem_closetab = Close
menuitem_closealltab = Close All
menuitem_zoomin = Zoom In
menuitem_zoomout = Zoom Out
menuitem_showapi = FFapl API
menuitem_run = Run
menuitem_terminate = Terminate
menuitem_printfile = Print file...
menuitem_addSnippet = Add Snippet
menuitem_delete = Delete
menuitem_add = Add
menuitem_cut = Cut
menuitem_copy = Copy
menuitem_paste = Paste
menuitem_search = Search
menuitem_replace = Replace
		
#		<!--  Title for Button Tooltip -->
button_run = Run
button_terminate = Terminate
button_closetab = close Tab
button_undo = Undo
button_redo = Redo
button_save = Save
button_saveall = Save All
button_edit = Edit
button_ok = Ok
button_cancel = Cancel
button_apply = Apply
button_print = Print file...
button_zoomin = Zoom In
button_zoomout = Zoom Out
button_newfile = New File
button_find = Find Next
button_replace = Replace
button_replaceall = Replace All
button_settings = Settings

#		<!--  Title for Radiobuttons -->
rdbtn_standardsearch = Standard search
rdbtn_advancedsearch = Advanced search
rdbtn_regularexpression = Regular expression

#		<!--  Title for Checkboxes -->
chckbx_matchcase = Match case
chckbx_dotall = . matches newline
chckbx_wraparound = Wrap around
chckbx_handleescapes = Use symbols: \\r, \\n, \\t
chckbx_showbalancingerror = Show balancing errors
chckbx_replaceallfromstart = From start

#		<!--  Title for Tabbed Pane Tabs -->
tabbedPane_tabconsole = Console
tabbedPane_tabsearch = Search
tabbedPane_tabreplace = Replace
		
#		<!-- Title for Label -->
label_chooselang = Choose language:
label_langinfo = Hint: This setting does not affect Java internal messages
label_linecolumntxt = line : column ->
label_show_warning = Show warnings?
label_name = Name:
label_variable = Variables:
label_description = Description:
label_snippet = Snippet:
label_searchfor = Search for:
label_replacewith = Replace with:
label_matchingpairs = Matching pairs:

#		<!-- Title for RadioButton -->
radio_function = Function
radio_procedure = Procedure

#		<!-- Title for Panel -->
panel_mode = Search Mode
panel_options = Options
		
#		<!-- Title Buttons -->
button_ok = Ok
button_cancel = Cancel
button_close = Close
button_license = License
		
#		<!-- Title Preferences -->
preftree_preferences = Preferences
preftree_general = General
preftree_language = Language
preftree_interpreter = Interpreter
apitree_procedure = Procedures
apitree_function = Functions
apitree_programs = Programs
apitree_type = Types
apitree_sample = Samples
apitree_customCode = Snippets
apitree_specification = Specifications
		
#		<!-- Title Dialog -->
dialog_preferences = Preferences
dialog_about = About Sunset
dialog_license = License
dialog_api = FFapl API
dialog_searchreplace = Search / Replace
dialog_searchsettings = Search Settings
		
#		<!-- Others -->
filefilter = ffapl-Files
inputDialog_enterline = Go to line
inputDialog_gotoline = Enter line number	

#		<!-- Questions -->
question_savechange_title = Save shanges?
question_savechange = Save changes from {0}?
question_fileoverride_title = Override file?
question_fileoverride = Override file {0}?
question_abortexecution = Currently a FFapl-Program is executed.\nDo you want to abort the execution?
question_delete_Title = Delete entry?
question_delete = Delete {0}?
		
#		<!-- Warning & Info -->
warning_title = Warning!
info_cannotoverride = Can not override file. File {0} is currently in use.
		
file_locked_title = File locked!
file_locked = The process can not access {0},\n due to a file lock from another process!

sunset_desc = integrated development environment for FFapl developers

#		<!-- Search & Replace -->
search_zerolengthmatch = Zero length match at line 
search_success = Search pattern found at line(s) 
search_nosuccess = Search pattern not found from line 
search_settings_saved = Settings saved successfully
replace_done_nextfound = Replace: 1 occurrence replaced, next occurrence found
replace_done_nofurtherfound = Replace: 1 occurrence replaced, no further occurrences found
replaceall_success = Replace All: {0} occurrence(s) replaced
exception_searchindexoutofbounds = Search index out of bounds: {0}
exception_invalidpattern_missingdelim = Invalid search pattern! Missing delimiter between variables: {0}
exception_invalidpattern_varmorethanonce = Invalid search pattern! Variable has been used more than once: %
exception_invalidpattern_novarused = Invalid search pattern! No variable used in the search pattern
exception_undeclaredvariable = Variable %{0} from replace text has not been used in search pattern
exception_matchingpairconfig = Bad matching pair configuration: {0}
exception_unbalancedstring = Matched string is unbalanced: {0}

#		<!-- TableHead -->
thead_parameter = Parameter
thead_type = Type

#		<!-- Types -->
DESC_TYPE_INTEGER = Represents an integer value.
DESC_TYPE_RESIDUE_CLASS = Represents a residue class modulo <i>p</i>.
DESC_TYPE_STRING = Represents a string.
DESC_TYPE_POLYNOMIAL = Represents a polynom.
DESC_TYPE_EC = Represents an elliptic curve with the Weierstrass Polynomial<br> y<sup>2</sup> + a<sub>1</sub> x y + a<sub>3</sub> y = x<sup>3</sup> + a<sub>2</sub> x<sup>2</sup> + a<sub>4</sub> x + a<sub>6</sub>.<br>Declaration: EC( GF(p,g) | Z(p) [, ai := ... ]* )<br>The base field must be declared as for GF(p,g) or Z(p).
DESC_TYPE_POLYNOMIAL_RESIDUE_CLASS = Represents a polynomial ring modulo <i>p</i>.
DESC_TYPE_GF = Represents a galois field with characteristic <i>p</i> and irreducible polynomial <i>g</i>.
DESC_TYPE_PSEUDORANDOM_GENERATOR = Represents a pseudo random number generator with a <i>seed</i>.<br>Generates random integers between 0 (incl.) and <i>max</i> (incl.).
DESC_TYPE_RANDOM_GENERATOR_MAX = Represents a random number generator.<br>Generates random integers between 0 (incl.) and <i>max</i> (incl.).
DESC_TYPE_RANDOM_GENERATOR = Represents a random number generator.<br>Generates random integers between <i>min</i> (incl.) and <i>max</i> (incl.).
DESC_TYPE_RECORD = Represents a structure similar to c structs <b> currently not in use </b>
DESC_TYPE_SAMEAS = Clones a type.
DESC_TYPE_BOOLEAN = Represents a Boolean value, either <i>true</i> or <i>false</i>.
DESC_TYPE_PRIME = Represents a prime, with a primality check being done upon every assignment (automatically). <b>Attention:</b> this is not useful for primality testing (due to errors being thrown); use the <i>isPrime</i> function instead.


#		<!-- Procedure -->
DESC_PROC_PRINT = Prints out <i>val</i>.
DESC_PROC_PRINTLN = Prints out <i>val</i> and new line.
#		<!-- Function -->
DESC_FUNC_MAX = Determines the maximum of <i>a</i> and <i>b</i>.
DESC_FUNC_MIN = Determines the minimum of <i>a</i> and <i>b</i>.
DESC_FUNC_GETNEXTPRIME = Determines the next prime number after <i>val</i>.
DESC_FUNC_IRREDUCIBLEPOLYNOMIAL = Generates an irreducible polynomial with degree <i>n</i> modulo <i>p</i>.
DESC_FUNC_RANDOMPOLYNOMIAL = Generates a random polynomial with degree <i>n</i> modulo <i>p</i>.
DESC_FUNC_FACTORINTEGER = Factorize an integer <i>n</i>. Switches between Pollard's <i>&rho;</i>-, Pollard's <i>(p-1)</i>-algorithm and simple iteration.
DESC_FUNC_FACTORSQUAREFREE = Determines square-free factorization of <i>f</i> in <i>GF</i>.
DESC_FUNC_FACTOR = Determines factorization of <i>f</i> in <i>GF</i>.
DESC_FUNC_EVALUATEPOLYNOMIAL = Calculates the value of <i>f</i>, for <i>x</i> := <i>val</i>.
DESC_FUNC_GCD = Calculates the great common divisor of <i>a</i> and <i>b</i>.
DESC_FUNC_LCM = Calculates the least common multiple of <i>a</i> and <i>b</i>.
DESC_FUNC_GCDRS = Calculates the great common divisor of <i>a</i> and <i>b</i> in <i>Z()[x]</i>.
DESC_FUNC_EEA = Returns an array with {<i>d</i>,<i>s</i>,<i>t</i>} were <i>s</i>*<i>a</i> + <i>t</i>*<i>b</i> = <i>gcd</i>(<i>a</i>,<i>b</i>) = <i>d</i>.
DESC_FUNC_EEARS = Returns an array with {<i>d</i>,<i>s</i>,<i>t</i>} were  <i>s</i>*<i>g</i> + <i>t</i>*<i>h</i> = <i>gcd</i>(<i>g</i>,<i>h</i>) = <i>d</i> in <i>Z()[x]</i>.
DESC_FUNC_ISPRIME = Returns <b>true</b> if <i>val</i> is prime, <b>false</b> otherwise.
DESC_FUNC_ISIRREDUCIBLERS = Returns <b>true</b> if <i>val</i> is irreducible in <i>Z()[x]</i>, <b>false</b> otherwise.
DESC_FUNC_ISIRREDUCIBLE = Returns <b>true</b> if <i>ply</i> is irreducible in <i>Z(p)[x]</i>, <b>false</b> otherwise.
DESC_FUNC_ISPRIMITIVE = Returns <b>true</b> if <i>ply</i> is irreducible in <i>Z(p)[x]</i>, <b>false</b> otherwise.	<br><i>primeFactors</i> := prime factors of <i>p^(degree of ply) - 1</i>.
DESC_FUNC_ISPRIMITIVEPOLY = Returns <b>true</b> if <i>ply</i> is irreducible in <i>Z(p)[x]</i>, <b>false</b> otherwise.	<br><i>p^(degree of ply) - 1</i> will be factorized (may take a long time).
DESC_FUNC_ISPRIMITIVERS = Returns <b>true</b> if <i>ply</i> is irreducible in <i>Z(p)[x]</i>, <b>false</b> otherwise. <br><i>p^(degree of ply) - 1</i> will be factorized (may take a long time).
DESC_FUNC_GETIRREDUCIBLEPOLYNOMIAL = Determines the irreducible polynomial of <i>GF()</i> from <i>val</i>.
DESC_FUNC_GETCHARACTERISTIC = Determines the characteristic of [<i>GF()</i> | <i>Z()</i> | <i>Z()[x]</i>] from <i>val</i>.
DESC_FUNC_LEADINGCOEFFICIENT = Determines the leading coefficient of <i>ply</i>.
DESC_FUNC_INT = Converts value <i>val</i> in <i>Z(p)</i> to <i>Integer</i>.
DESC_FUNC_DEGREE = Determines the degree of <i>ply</i>.
DESC_FUNC_COEFFICIENTAT = Determines the coefficient of <i>x^e</i> in <i>ply</i>.
#		<!-- ADDED by Markus Wiltsche -->
DESC_FUNC_TOSTRING = Returns the string representation of a type, without showing it's characteristics <br> e.g. instead of 'GF(5, 1 + x + x^3): 1 + x + 4x^2' will '1 + x + 4x^2' be returned.
DESC_FUNC_HASH = Returns the hash (SHA-256) of the object.
#               <!-- ADDED by Volker Bugl     -->
DESC_FUNC_READ = Hands over user input to the program at runtime with the specified type. The parameter <i>prompt</i> is an optional prompt message for the console.
#               <!-- ADDED by Johannes Winkler     -->
DESC_FUNC_SQRT_Z = Computes the square root in of an Integer, an element of a residue class of prime order or a finite field element.
DESC_FUNC_TLP = Computes the Tate-Lichtenbaum-Pairing for the EC Points <i>A</i> in <i>EC(Z(p))[n]</i> (subgroup of <i>n</i>-torsion points) and <i>B</i> in <i>EC(GF(p<sup>k</sup>))</i>. The result lies in the group of units <i>GF(q<sup>k</sup>)<sup>*</sup>/(GF(q<sup>k</sup>)<sup>*</sup>)<sup>n</sup></sup>.<br><br>Note that this function admits an <b>optional third parameter n</b> telling the order of the point <i>A</i> in the EC group (this can be used to speed up the computation, since the order is by default computed brute-force)
DESC_FUNC_AESENCRYPT = AES encryption of a message <i>M</i> under the key <i>k</i> in CBC-mode (and initialization vector <i>IV</i>) using PKCS5 padding.
DESC_FUNC_AESDECRYPT = AES decryption of a message <i>M</i> under the key <i>k</i> in CBC-mode (and initialization vector <i>IV</i>) using PKCS5 padding. Attention: the function throws an error if the input block is improperly padded.
DESC_FUNC_AESRAWENCRYPT = AES encryption of a <b>single message block</b> <i>M</i> under the key <i>k</i> without padding (inputs with less than 128 bits get leading zeroes attached. Be aware that the sign of an integer adds a bit to the input!) 
DESC_FUNC_AESRAWDECRYPT = AES decryption of a <b>single message block</b> <i>M</i> under the key <i>k</i> without padding (inputs with less than 128 bits get leading zeroes attached. Be aware that the sign of an integer adds a bit to the input!)


#		<!-- SAMPLE Function -->
SAMPLE_PROC = Sample procedure with one parameter <i>val</i>.
SAMPLE_FUNC = Sample function with one parameter <i>val</i> and return type.
SAMPLE_FUNC_FACULTY = Determines the faculty of <i>val</i>.
SAMPLE_FUNC_FACULTYRECURSIVE = Determines the faculty of <i>val</i> recursively.
SAMPLE_FUNC_ISIRREDUCIBLEQ =  Tests whether polynomial <i>f</i> is irreducible in <i>Z(p)[x]</i>.
SAMPLE_FUNC_TLPAIRING =  Calculates the Tate-Lichtenbaum Pairing for the EC points <i>P</i> in <i>EC(Z(p))[n]</i> (subgroup of <i>n</i>-torsion points) and <i>Q</i> in <i>EC(GF(p<sup>k</sup>))</i>. The result lies in the group of units <i>GF(q<sup>k</sup>)<sup>*</sup>/(GF(q<sup>k</sup>)<sup>*</sup>)<sup>n</sup></sup>
SAMPLE_FUNC_DISTORTIONMAP1 = distortion map for elliptic curves <i>y<sup>2</sup> = x<sup>3</sup> + a<sub>4</sub> x</i> over the field <i>Z(p)</i> adjoint with an element <i>i</i> for which <i>i<sup>2</sup> = -1 (mod p)</i>
SAMPLE_FUNC_DISTORTIONMAP2 = distortion map for elliptic curves <i>y<sup>2</sup> = x<sup>3</sup> + a<sub>6</sub></i> over the field <i>Z(p)</i> adjoint with an element <i>j &ne; 1</i> for which <i>j<sup>3</sup> = 1</i>, and where <i>p</i> is congruent to 2 modulo 3 
SAMPLE_FUNC_CHREM = Chinese remaindering to solve simultaneous congruences <i>x</i> \u2261 <i>a[i]</i> (mod <i>m[i]</i>) for all <i>i</i>, using Gauss' algorithm. The arrays need to be of the same length. The entries in <i>m</i> are assumed, but not checked, to be pairwise co-prime.
SAMPLE_FUNC_TEMPLATE = Template function.
SAMPLE_FUNC_ISPRIMITIVEQ = Tests whether polynomial <i>f</i> is primitive in <i>Z(p)[x]</i>.
#		<!-- SAMPLE Procedure -->
SAMPLE_PROC_TEMPLATE = Template procedure.
SAMPLE_PROC_ECRANDOM = Example code showing how random points on elliptic curves can be drawn